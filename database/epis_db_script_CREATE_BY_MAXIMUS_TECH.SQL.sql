/*##########################################################################################################################################
#                                                            CREATE_BY_MAXIMUS_TECH                                                        #
############################################################################################################################################*/

--///////////////////////////////////////////////////////////TABLE CORRECEIPT///////////////////////////////////////////////////////////////--
--#####SEQ######--
--##########ALTER TABLE CORRECEIPT###########--
ALTER TABLE CORRECEIPT
ADD DOCNO_SAP VARCHAR2 (20) ;
ALTER TABLE CORRECEIPT
ADD YEAR_ACC NUMBER(4,0) ;
ALTER TABLE CORRECEIPT
ADD MESSAGE  VARCHAR2 (100);
--///////////////////////////////////////////////////////////TABLE TRSCHEQUEREF_MANUAL///////////////////////////////////////////////////////////////--
--#####SEQ######--
TRSCHEQUEREF_MANUAL_SEQ
--##########CREATE TABLE###########--
CREATE TABLE TRSCHEQUEREF_MANUAL (
    "ID" NUMBER(*,0), 
	"CHEQUENO" VARCHAR2(40 BYTE), 
	"PUBLISHERID" VARCHAR2(20 BYTE), 
	"PUBLISHER" VARCHAR2(300 BYTE), 
	"BRANCH" VARCHAR2(300 BYTE), 
	"AMOUNT" NUMBER(14,2), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"CHEQUEDATE" TIMESTAMP (6), 
	"BOUNCE_CHEQUE_DATE" TIMESTAMP (6), 
	"REVERSE_AR_DATE" TIMESTAMP (6), 
	"BOUNCE_STATUS" VARCHAR2(20 BYTE), 
	"METHOD_MANUAL_ID" NUMBER
);


ALTER TABLE TRSCHEQUEREF_MANUAL
  ADD (
    CONSTRAINT TRSCHEQUEREF_MANUAL_pk PRIMARY KEY ("ID")
  );
  
  CREATE SEQUENCE TRSCHEQUEREF_MANUAL_SEQ;
  
--#####SEQ######--
TRSCREDITREF_MANUAL_SEQ
--##########CREATE TABLE###########--
CREATE TABLE TRSCREDITREF_MANUAL (
    "ID" NUMBER(*,0), 
	"CREDITNO" VARCHAR2(40 BYTE), 
	"PUBLISHERDEC" VARCHAR2(20 BYTE), 
	"CARDTYPE" VARCHAR2(20 BYTE), 
	"AMOUNT" NUMBER(14,2), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"METHOD_MANUAL_ID" NUMBER
);


ALTER TABLE TRSCREDITREF_MANUAL
  ADD (
    CONSTRAINT TRSCREDITREF_MANUAL_pk PRIMARY KEY ("ID")
  );
    CREATE SEQUENCE TRSCREDITREF_MANUAL_SEQ;
--#####SEQ######--
RECEIVE_GATEWAY_LOG_SEQ

--##########CREATE TABLE###########--

  CREATE TABLE "EPIS"."RECEIVE_GATEWAY_LOG" 
   (	"LOG_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"INVOICENO" VARCHAR2(50 BYTE), 
	"PAIDDATE" TIMESTAMP (6), 
	"ACCOUNTNO" VARCHAR2(35 BYTE), 
	"PAID_AMOUNT" NUMBER(14,4), 
	 CONSTRAINT "RECEIVE_GATEWAY_LOG_PK" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."RECEIVE_GATEWAY_LOG_TRG" 
BEFORE INSERT ON RECEIVE_GATEWAY_LOG 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.LOG_ID IS NULL THEN
      SELECT RECEIVE_GATEWAY_LOG_SEQ.NEXTVAL INTO :NEW.LOG_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."RECEIVE_GATEWAY_LOG_TRG" ENABLE;

--///////////////////////////////////////////////////////////TABLE SAP_AR///////////////////////////////////////////////////////////////--
CREATE SEQUENCE SAP_AR_SEQ;

CREATE TABLE "EPIS"."SAP_AR" 
   (	"ID" NUMBER(38,0) NOT NULL ENABLE, 
	"SOURCE" VARCHAR2(20 BYTE), 
	"AR_REF" VARCHAR2(20 BYTE), 
	"BILLGROUP" VARCHAR2(20 BYTE), 
	"ACCOUNT_CODE_OLD" VARCHAR2(10 BYTE), 
	"ACCOUNT_NO" VARCHAR2(35 BYTE), 
	"TAX_ID" VARCHAR2(20 BYTE), 
	"CUSTOMER_NAME" VARCHAR2(100 BYTE), 
	"CUSTOMER_LASTNAME" VARCHAR2(100 BYTE), 
	"CUSTOMER_ADDRESS" VARCHAR2(255 BYTE), 
	"CUSTOMER_BRANCH_CODE" VARCHAR2(20 BYTE), 
	"E_GP" VARCHAR2(20 BYTE), 
	"CUSTOMER_STAUS" VARCHAR2(20 BYTE), 
	"REGION" VARCHAR2(20 BYTE), 
	"REGION_NAME" VARCHAR2(100 BYTE), 
	"NEW_CODE" VARCHAR2(20 BYTE), 
	"CUSTOMER_GROUP" VARCHAR2(10 BYTE), 
	"CUS_CATEGORY_CODE" VARCHAR2(20 BYTE), 
	"CUS_CATEGORY_NAME" VARCHAR2(100 BYTE), 
	"CUSTOMER_TYPE_CODE" VARCHAR2(20 BYTE), 
	"CUSTOMER_TYPE_NAME" VARCHAR2(100 BYTE), 
	"SEGMENT_CODE" VARCHAR2(20 BYTE), 
	"PRODUCT_CODE" VARCHAR2(20 BYTE), 
	"SUB_PRODUCT_CODE" VARCHAR2(20 BYTE), 
	"REVENUE_TYPE_CODE" VARCHAR2(20 BYTE), 
	"INVDATE" TIMESTAMP (6), 
	"DUEDATE" TIMESTAMP (6), 
	"PAYDATE" TIMESTAMP (6), 
	"INV_PERIOD" VARCHAR2(20 BYTE), 
	"SAP_PERIOD" VARCHAR2(20 BYTE), 
	"AMOUNT_AR" NUMBER(14,4), 
	"VAT_AMOUNT_AR" NUMBER(14,4), 
	"TOTAL_AMOUNT_AR" NUMBER(14,4), 
	"CURRANCY_AR" VARCHAR2(20 BYTE), 
	"EXCH_RATE_AR" NUMBER(6,4), 
	"EXCH_RATE_DATE_AR" TIMESTAMP (6), 
	"VAT_RATE_AR" VARCHAR2(20 BYTE), 
	"WT_RATE" NUMBER(6,4), 
	"DISCOUNT" NUMBER(14,4), 
	"TAX_INCLUDE" VARCHAR2(100 BYTE), 
	"TOTAL_AMOUNT_PAID" NUMBER(14,4), 
	"CURRENCY_PAID" VARCHAR2(20 BYTE), 
	"EXCH_RATE_PAID" NUMBER(6,4), 
	"EXCH_RATE_DATE_PAID" TIMESTAMP (6), 
	"PAY_ADVANCE" NUMBER(14,4), 
	"BALANCE_DUE" NUMBER(14,4), 
	"TRADING_PART" VARCHAR2(20 BYTE), 
	"TEXT" VARCHAR2(250 BYTE), 
	"CCTR" VARCHAR2(20 BYTE), 
	"SUBSCR_NO" VARCHAR2(20 BYTE), 
	"LOAD_DATE" VARCHAR2(20 BYTE), 
	"SERVICE_PRIORITY_PRODUCT" VARCHAR2(20 BYTE), 
	"RENTAL_CHARGE" VARCHAR2(20 BYTE), 
	"USESAGE_CHARGE" VARCHAR2(20 BYTE), 
	"PROCESS_DATE" TIMESTAMP (6), 
	"SERV_TYPE_CODE" VARCHAR2(20 BYTE), 
	"SERV_DESC" VARCHAR2(100 BYTE), 
	"STD_CODE" VARCHAR2(20 BYTE), 
	"SERVICE_CODE" VARCHAR2(20 BYTE), 
	"SERVICE_NAME" VARCHAR2(100 BYTE), 
	"REGION_SAP" VARCHAR2(20 BYTE), 
	"CCTR_SAP" VARCHAR2(20 BYTE), 
	"SERVICE_PRIORITY" VARCHAR2(20 BYTE), 
	"CATEGORY" VARCHAR2(20 BYTE), 
	"POSTING_DATE" VARCHAR2(20 BYTE), 
	"CALLS" VARCHAR2(20 BYTE), 
	"RATED_UNITS" VARCHAR2(20 BYTE), 
	"PRIMARY_UNITS" VARCHAR2(20 BYTE), 
	"SECONDARY_UNITS" VARCHAR2(20 BYTE), 
	"THIRD_UNITS" VARCHAR2(20 BYTE), 
	"PROPERTY1" VARCHAR2(100 BYTE), 
	"PROPERTY2" VARCHAR2(100 BYTE), 
	"CARRIER_CODE" VARCHAR2(10 BYTE), 
	"CARRIER_NAME" VARCHAR2(100 BYTE), 
	"PRODUCT_NAME" VARCHAR2(255 BYTE), 
	"SUB_PRODUCT_NAME" VARCHAR2(255 BYTE), 
	"REV_TYPE_NAME" VARCHAR2(100 BYTE), 
	"GL_ACCOUNT" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"CREATE_BY" VARCHAR2(100 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(100 BYTE), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	"FISCAL_YEAR" NUMBER(4,0), 
	"AMOUNT_OTHER_AR" NUMBER(14,4), 
	"TAX_CODE" VARCHAR2(20 BYTE), 
	"MESSAGE" VARCHAR2(100 BYTE), 
	"HEADER_TEXT" VARCHAR2(20 BYTE), 
	"DOC_NO" VARCHAR2(20 BYTE), 
	"RECONCILE" VARCHAR2(20 BYTE), 
	"COMPANY_CODE" VARCHAR2(20 BYTE), 
	"ACCOUNT_CODE_NEW" VARCHAR2(10 BYTE), 
	 CONSTRAINT "SAP_AR01_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

   COMMENT ON COLUMN "EPIS"."SAP_AR"."AR_REF" IS 'เลขที่ invoice';
   COMMENT ON COLUMN "EPIS"."SAP_AR"."REGION" IS 'รหัสหน่วยงานติดตามหนี้';

CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."SAP_AR_TRG3" 
BEFORE INSERT ON SAP_AR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT SAP_AR_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."SAP_AR_TRG3" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."SAP_AR_TRG1" 
BEFORE INSERT ON SAP_AR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."SAP_AR_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."SAP_AR_TRG2" 
BEFORE INSERT ON SAP_AR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."SAP_AR_TRG2" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."SAP_AR01_TRG" 
BEFORE INSERT ON "SAP_AR" 
FOR EACH ROW 
BEGIN 
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."SAP_AR01_TRG" ENABLE;


--///////////////////////////////////////////////////////////TABLE INV_SOURCE///////////////////////////////////////////////////////////////--
CREATE SEQUENCE INV_SOURCE_SEQ;
--#####SEQ######--
  INV_SOURCE_SEQ

--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."INV_SOURCE" 
   (	"ID" NUMBER(38,0) NOT NULL ENABLE, 
	"SOURCE" VARCHAR2(20 BYTE), 
	"AR_REF" VARCHAR2(20 BYTE), 
	"BILLGROUP" VARCHAR2(20 BYTE), 
	"ACCOUNT_CODE_OLD" VARCHAR2(10 BYTE), 
	"ACCOUNT_NO" VARCHAR2(35 BYTE), 
	"TAX_ID" VARCHAR2(20 BYTE), 
	"CUSTOMER_NAME" VARCHAR2(100 BYTE), 
	"CUSTOMER_LASTNAME" VARCHAR2(100 BYTE), 
	"CUSTOMER_ADDRESS" VARCHAR2(255 BYTE), 
	"CUSTOMER_BRANCH_CODE" VARCHAR2(20 BYTE), 
	"E_GP" VARCHAR2(20 BYTE), 
	"CUSTOMER_STAUS" VARCHAR2(20 BYTE), 
	"REGION" VARCHAR2(20 BYTE), 
	"REGION_NAME" VARCHAR2(100 BYTE), 
	"NEW_CODE" VARCHAR2(20 BYTE), 
	"CUSTOMER_GROUP" VARCHAR2(10 BYTE), 
	"CUS_CATEGORY_CODE" VARCHAR2(20 BYTE), 
	"CUS_CATEGORY_NAME" VARCHAR2(100 BYTE), 
	"CUSTOMER_TYPE_CODE" VARCHAR2(20 BYTE), 
	"CUSTOMER_TYPE_NAME" VARCHAR2(100 BYTE), 
	"SEGMENT_CODE" VARCHAR2(20 BYTE), 
	"PRODUCT_CODE" VARCHAR2(20 BYTE), 
	"SUB_PRODUCT_CODE" VARCHAR2(20 BYTE), 
	"REVENUE_TYPE_CODE" VARCHAR2(20 BYTE), 
	"INVDATE" TIMESTAMP (6), 
	"DUEDATE" TIMESTAMP (6), 
	"PAYDATE" TIMESTAMP (6), 
	"INV_PERIOD" VARCHAR2(20 BYTE), 
	"SAP_PERIOD" VARCHAR2(20 BYTE), 
	"AMOUNT_AR" NUMBER(14,4), 
	"VAT_AMOUNT_AR" NUMBER(14,4), 
	"TOTAL_AMOUNT_AR" NUMBER(14,4), 
	"CURRANCY_AR" VARCHAR2(20 BYTE), 
	"EXCH_RATE_AR" NUMBER(6,4), 
	"EXCH_RATE_DATE_AR" TIMESTAMP (6), 
	"VAT_RATE_AR" VARCHAR2(20 BYTE), 
	"WT_RATE" NUMBER(6,4), 
	"DISCOUNT" NUMBER(14,4), 
	"TAX_INCLUDE" VARCHAR2(100 BYTE), 
	"TOTAL_AMOUNT_PAID" NUMBER(14,4), 
	"CURRENCY_PAID" VARCHAR2(20 BYTE), 
	"EXCH_RATE_PAID" NUMBER(6,4), 
	"EXCH_RATE_DATE_PAID" TIMESTAMP (6), 
	"PAY_ADVANCE" NUMBER(14,4), 
	"BALANCE_DUE" NUMBER(14,4), 
	"TRADING_PART" VARCHAR2(20 BYTE), 
	"TEXT" VARCHAR2(250 BYTE), 
	"CCTR" VARCHAR2(20 BYTE), 
	"SUBSCR_NO" VARCHAR2(20 BYTE), 
	"LOAD_DATE" VARCHAR2(20 BYTE), 
	"SERVICE_PRIORITY_PRODUCT" VARCHAR2(20 BYTE), 
	"RENTAL_CHARGE" VARCHAR2(20 BYTE), 
	"USESAGE_CHARGE" VARCHAR2(20 BYTE), 
	"PROCESS_DATE" TIMESTAMP (6), 
	"SERV_TYPE_CODE" VARCHAR2(20 BYTE), 
	"SERV_DESC" VARCHAR2(100 BYTE), 
	"STD_CODE" VARCHAR2(20 BYTE), 
	"SERVICE_CODE" VARCHAR2(20 BYTE), 
	"SERVICE_NAME" VARCHAR2(100 BYTE), 
	"REGION_SAP" VARCHAR2(20 BYTE), 
	"CCTR_SAP" VARCHAR2(20 BYTE), 
	"SERVICE_PRIORITY" VARCHAR2(20 BYTE), 
	"CATEGORY" VARCHAR2(20 BYTE), 
	"POSTING_DATE" VARCHAR2(20 BYTE), 
	"CALLS" VARCHAR2(20 BYTE), 
	"RATED_UNITS" VARCHAR2(20 BYTE), 
	"PRIMARY_UNITS" VARCHAR2(20 BYTE), 
	"SECONDARY_UNITS" VARCHAR2(20 BYTE), 
	"THIRD_UNITS" VARCHAR2(20 BYTE), 
	"PROPERTY1" VARCHAR2(100 BYTE), 
	"PROPERTY2" VARCHAR2(100 BYTE), 
	"CARRIER_CODE" VARCHAR2(10 BYTE), 
	"CARRIER_NAME" VARCHAR2(100 BYTE), 
	"PRODUCT_NAME" VARCHAR2(255 BYTE), 
	"SUB_PRODUCT_NAME" VARCHAR2(255 BYTE), 
	"REV_TYPE_NAME" VARCHAR2(100 BYTE), 
	"GL_ACCOUNT" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"CREATE_BY" VARCHAR2(100 BYTE), 
	"UPDAE_DATE" TIMESTAMP (6), 
	"UPDAE_BY" VARCHAR2(100 BYTE), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	"FISCAL_YEAR" NUMBER(4,0), 
	"AMOUNT_BAHT_AR" NUMBER(14,4), 
	"TAX_CODE" VARCHAR2(20 BYTE), 
	"MESSAGE" VARCHAR2(100 BYTE), 
	"HEADER_TEXT" VARCHAR2(20 BYTE), 
	"DOC_NO" VARCHAR2(20 BYTE), 
	"RECONCILE" VARCHAR2(20 BYTE), 
	"COMPANY_CODE" VARCHAR2(20 BYTE), 
	"ACCOUNT_CODE_NEW" VARCHAR2(10 BYTE), 
	 CONSTRAINT "INV_SOURCE01_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

   COMMENT ON COLUMN "EPIS"."INV_SOURCE"."AR_REF" IS 'เลขที่ invoice';
   COMMENT ON COLUMN "EPIS"."INV_SOURCE"."REGION" IS 'รหัสหน่วยงานติดตามหนี้';

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."INV_SOURCE_TRG3" 
BEFORE INSERT ON INV_SOURCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT INV_SOURCE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."INV_SOURCE_TRG3" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."INV_SOURCE_TRG1" 
BEFORE INSERT ON INV_SOURCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."INV_SOURCE_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."INV_SOURCE_TRG2" 
BEFORE INSERT ON INV_SOURCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."INV_SOURCE_TRG2" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."INV_SOURCE01_TRG" 
BEFORE INSERT ON "INV_SOURCE" 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."INV_SOURCE01_TRG" ENABLE;

--////////////////////////////////////////////////////////////////TABLE REFUND_HEADER//////////////////////////////////////////////////////////--
--#####SEQ######--
REFUND_HEADER_SEQ

--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."REFUND_HEADER" 
   (	"REFUND_HEADER_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"REFUND_NO" VARCHAR2(30 BYTE), 
	"RECEIPTID" NUMBER(38,0), 
	"INVOICE_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"INVOICE_NO" VARCHAR2(30 BYTE), 
	"REFUND_REASON" VARCHAR2(100 BYTE), 
	"REFUND_BY" VARCHAR2(50 BYTE), 
	"REQUEST_DATE" TIMESTAMP (6), 
	"REQUEST_TOTAL_AMT" NUMBER(14,4), 
	"REQUEST_CURRENCY" VARCHAR2(20 BYTE), 
	"ISSUE_DATE" TIMESTAMP (6), 
	"ISSUE_TOTAL_AMT" NUMBER(14,4), 
	"ISSUE_CURRENCY" VARCHAR2(20 BYTE), 
	"REFUND_STATUS" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(50 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	 CONSTRAINT "REFUND_HEADER_PK" PRIMARY KEY ("REFUND_HEADER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "EPIS_DATA" ;

   COMMENT ON COLUMN "EPIS"."REFUND_HEADER"."REFUND_STATUS" IS 'Request,
Approve,
Issue
';

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."REFUND_HEADER_TRG" 
BEFORE INSERT ON REFUND_HEADER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."REFUND_HEADER_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."REFUND_HEADER_TRG1" 
BEFORE INSERT ON REFUND_HEADER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.REFUND_HEADER_ID IS NULL THEN
      SELECT REFUND_HEADER_SEQ.NEXTVAL INTO :NEW.REFUND_HEADER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."REFUND_HEADER_TRG1" ENABLE;

--////////////////////////////////////////////////////////////////TABLE REFUND_DETAIL//////////////////////////////////////////////////////////--
--#####SEQ######--
REFUND_DETAIL_SEQ

--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."REFUND_DETAIL" 
   (	"REFUND_DETAIL_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"REFUND_HEADER_ID" NUMBER(38,0), 
	"PRODUCT_ID" VARCHAR2(15 BYTE), 
	"SUB_PRODUCT_ID" VARCHAR2(15 BYTE), 
	"REFUND_AMT" NUMBER(14,4), 
	"REQUEST_TOTAL_AMT" NUMBER(14,4), 
	"REQUEST_CURRENCY" VARCHAR2(20 BYTE), 
	"ISSUE_TOTAL_AMT" NUMBER(14,4), 
	"ISSUE_CURRENCY" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(50 BYTE), 
	"COLUMN1" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	 CONSTRAINT "REFUND_DETAIL_PK" PRIMARY KEY ("REFUND_DETAIL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."REFUND_DETAIL_TRG1" 
BEFORE INSERT ON REFUND_DETAIL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.REFUND_DETAIL_ID IS NULL THEN
      SELECT REFUND_DETAIL_SEQ.NEXTVAL INTO :NEW.REFUND_DETAIL_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."REFUND_DETAIL_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."REFUND_DETAIL_TRG" 
BEFORE INSERT ON REFUND_DETAIL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."REFUND_DETAIL_TRG" ENABLE;


--////////////////////////////////////////////////////////////////TABLE REFUND_DOC//////////////////////////////////////////////////////////--
--#####SEQ######--
REFUND_DOC_SEQ

--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."REFUND_DOC" 
   (	"REFUND_DOC_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"DOC_ID" NUMBER(38,0), 
	"DOC_PATH" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"REMARK" VARCHAR2(50 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	 CONSTRAINT "REFUND_DOC_PK" PRIMARY KEY ("REFUND_DOC_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."REFUND_DOC_TRG1" 
BEFORE INSERT ON REFUND_DOC 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.REFUND_DOC_ID IS NULL THEN
      SELECT REFUND_DOC_SEQ.NEXTVAL INTO :NEW.REFUND_DOC_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."REFUND_DOC_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."REFUND_DOC_TRG" 
BEFORE INSERT ON REFUND_DOC 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."REFUND_DOC_TRG" ENABLE;


--////////////////////////////////////////////////////////////////TABLE PAYMENT_MANUAL//////////////////////////////////////////////////////////--
--#####SEQ######--
PAYMENT_MANUAL_SEQ

--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."PAYMENT_MANUAL" 
   (	"MANUAL_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"PAYMENT_ID" NUMBER(38,0), 
	"INVOICE_NO" VARCHAR2(30 BYTE), 
	"RECEIPT_NO_MANUAL" VARCHAR2(30 BYTE), 
	"PAID_DATE" TIMESTAMP (6), 
	"BRANCH_AREA" VARCHAR2(100 BYTE), 
	"BRANCH_CODE" VARCHAR2(20 BYTE), 
	"PAID_AMOUNT" NUMBER(14,4), 
	"SOURCE" VARCHAR2(20 BYTE), 
	"CLEARING" VARCHAR2(20 BYTE), 
	"REMARK" VARCHAR2(50 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	"REF_ID" NUMBER(38,0), 
	"ACCOUNT_NO" VARCHAR2(35 BYTE), 
	"CLEARING_SAP" VARCHAR2(20 BYTE), 
	 CONSTRAINT "PAYMENT_MANUAL_PK" PRIMARY KEY ("MANUAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."PAYMENT_MANUAL_TRG2" 
BEFORE INSERT ON PAYMENT_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.MANUAL_ID IS NULL THEN
      SELECT PAYMENT_MANUAL_SEQ.NEXTVAL INTO :NEW.MANUAL_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."PAYMENT_MANUAL_TRG2" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."PAYMENT_MANUAL_TRG1" 
BEFORE INSERT ON PAYMENT_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."PAYMENT_MANUAL_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."PAYMENT_MANUAL_TRG" 
BEFORE INSERT ON PAYMENT_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."PAYMENT_MANUAL_TRG" ENABLE;


--////////////////////////////////////////////////////////////////TABLE PAYMENT_INVOICE_MANUAL//////////////////////////////////////////////////////////--
--#####SEQ######--
PAYMENT_INVOICE_MANUAL_SEQ

--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."PAYMENT_INVOICE_MANUAL" 
   (	"PAYMENT_INVOICE_MANUAL_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"MANUAL_ID" NUMBER(38,0), 
	"SOURCE" VARCHAR2(30 BYTE), 
	"INVOICE_NO" VARCHAR2(30 BYTE), 
	"AMOUNT" NUMBER(14,4), 
	"REMARK" VARCHAR2(100 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	 CONSTRAINT "PAYMENT_INVOICE_MANUAL_PK" PRIMARY KEY ("PAYMENT_INVOICE_MANUAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."PAYMENT_INVOICE_MANUAL_TRG" 
BEFORE INSERT ON PAYMENT_INVOICE_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PAYMENT_INVOICE_MANUAL_ID IS NULL THEN
      SELECT PAYMENT_INVOICE_MANUAL_SEQ.NEXTVAL INTO :NEW.PAYMENT_INVOICE_MANUAL_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."PAYMENT_INVOICE_MANUAL_TRG" ENABLE;

--////////////////////////////////////////////////////////////////TABLE DEDUCTION_MANUAL//////////////////////////////////////////////////////////--
--#####SEQ######--
DEDUCTION_MANUAL_SEQ

--##########CREATE TABLE###########--
  
  CREATE TABLE "EPIS"."DEDUCTION_MANUAL" 
   (	"DEDUCTION_MANUAL_ID" NUMBER(38,0) NOT NULL ENABLE, 
	"PAYMENTID" NUMBER, 
	"DEDUCTIONNO" VARCHAR2(40 BYTE), 
	"DEDUCTIONTYPE" VARCHAR2(10 BYTE), 
	"AMOUNT" NUMBER(14,4), 
	"PAYMENTDATE" DATE, 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(38,0), 
	"INVOICE_NO" VARCHAR2(30 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" TIMESTAMP (6), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	"MANUAL_ID" NUMBER, 
	 CONSTRAINT "DEDUC_MANUAL_PK" PRIMARY KEY ("DEDUCTION_MANUAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."DEDUCTION_MANUAL_TRG1" 
BEFORE INSERT ON DEDUCTION_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.DEDUCTION_MANUAL_ID IS NULL THEN
      SELECT DEDUCTION_MANUAL_SEQ.NEXTVAL INTO :NEW.DEDUCTION_MANUAL_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."DEDUCTION_MANUAL_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."DEDUCTION_MANUAL_TRG" 
BEFORE INSERT ON DEDUCTION_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."DEDUCTION_MANUAL_TRG" ENABLE;


--////////////////////////////////////////////////////////////////TABLE TRSMETHOD_MANUAL//////////////////////////////////////////////////////////--
--#####SEQ######--
TRSMETHOD_MANUAL_SEQ
--##########CREATE TABLE###########--
  
  CREATE TABLE "EPIS"."TRSMETHOD_MANUAL" 
   (	"METHOD_MANUAL_ID" NUMBER(*,0) NOT NULL ENABLE, 
	"PAYMENTID" NUMBER(*,0), 
	"CODE" VARCHAR2(13 BYTE), 
	"NAME" VARCHAR2(200 BYTE), 
	"CHEQUENO" VARCHAR2(40 BYTE), 
	"ACCOUNTNO" VARCHAR2(40 BYTE), 
	"AMOUNT" NUMBER(14,4), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"OFFSET_DOCUMENT_NO" VARCHAR2(255 BYTE), 
	"OFFSET_ACCOUNT_CODE" VARCHAR2(255 BYTE), 
	"OFFSET_ACCOUNT_NAME" VARCHAR2(255 BYTE), 
	"REMARK" VARCHAR2(100 BYTE), 
	"CREATE_BY" VARCHAR2(20 BYTE), 
	"CREATE_DATE" TIMESTAMP (6), 
	"UPDATE_BY" VARCHAR2(20 BYTE), 
	"UPDATE_DATE" VARCHAR2(20 BYTE), 
	"RECORD_STATUS" VARCHAR2(20 BYTE), 
	"MANUAL_ID" NUMBER(38,0), 
	 CONSTRAINT "TRSDEDUCTION_MANUAL_PK" PRIMARY KEY ("METHOD_MANUAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "EPIS_DATA" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EPIS"."TRSMETHOD_MANUAL_TRG" 
BEFORE INSERT ON TRSMETHOD_MANUAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.METHOD_MANUAL_ID IS NULL THEN
      SELECT TRSMETHOD_MANUAL_SEQ.NEXTVAL INTO :NEW.METHOD_MANUAL_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "EPIS"."TRSMETHOD_MANUAL_TRG" ENABLE;


/*##########################################################################################################################################
#                                                           UPDATE_BY_MAXIMUS_TECH                                                        #
############################################################################################################################################*/

--////////////////////////////////////////////////////////////////TABLE TRSPAYMENTREF//////////////////////////////////////////////////////////--
--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."TRSPAYMENTREF" 
   (	"PAYMENTREFID" NUMBER(*,0) NOT NULL ENABLE, 
	"PAYMENTID" NUMBER(*,0), 
	"SERVICEID" NUMBER(*,0), 
	"TRANSACTIONID" VARCHAR2(15 BYTE), 
	"TRACKINGID" VARCHAR2(20 BYTE), 
	"TRACKINGIDSERV" VARCHAR2(20 BYTE), 
	"TRACKINGCODE" VARCHAR2(40 BYTE), 
	"TRACKINGDETAILS" VARCHAR2(2000 BYTE), 
	"TRACKINGRETRY" NUMBER(*,0), 
	"PAYMENTDATE" DATE, 
	"PAYMENTTYPE" VARCHAR2(100 BYTE), 
	"PAYAMOUNT" NUMBER(14,2), 
	"PAYMENTCASE" VARCHAR2(13 BYTE), 
	"STATUS" VARCHAR2(13 BYTE), 
	"CHEQUENO" VARCHAR2(40 BYTE), 
	"ACCOUNTNO" VARCHAR2(40 BYTE), 
	"APPROVEDBY" VARCHAR2(30 BYTE), 
	"ATTRIBUTES" VARCHAR2(40 BYTE), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"PAY_TYPE_CODE" VARCHAR2(20 BYTE), 
	 CONSTRAINT "PK_TRSPAYMENTREF" PRIMARY KEY ("PAYMENTREFID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE, 
	 CONSTRAINT "FK_PAYPAY_PAYMENTID" FOREIGN KEY ("PAYMENTID")
	  REFERENCES "EPIS"."CORPAYMENT" ("PAYMENTID") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

--////////////////////////////////////////////////////////////////TABLE CORRECEIPT//////////////////////////////////////////////////////////--
--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."CORRECEIPT" 
   (	"RECEIPTID" NUMBER(*,0) NOT NULL ENABLE, 
	"PAYMENTID" NUMBER(*,0), 
	"ACCOUNTID" NUMBER(*,0), 
	"RECEIPTNO" VARCHAR2(40 BYTE), 
	"RECEIPTNAME" VARCHAR2(512 BYTE), 
	"RECEIPTTYPE" VARCHAR2(20 BYTE), 
	"RECEIPTDTTM" TIMESTAMP (6), 
	"ACCOUNTNO" VARCHAR2(35 BYTE), 
	"ACCOUNTSUBNO" VARCHAR2(40 BYTE), 
	"ACCOUNTTYPE" VARCHAR2(40 BYTE), 
	"ACCOUNTNAME" VARCHAR2(600 BYTE), 
	"ACCOUNTBRANCH" VARCHAR2(600 BYTE), 
	"TAXID" VARCHAR2(30 BYTE), 
	"ADDRESSLINE1" VARCHAR2(1024 BYTE), 
	"ADDRESSLINE2" VARCHAR2(1024 BYTE), 
	"PAYMENTCASE" VARCHAR2(200 BYTE), 
	"BRANCHCODE" VARCHAR2(20 BYTE), 
	"BRANCHAREA" VARCHAR2(20 BYTE), 
	"BRANCHNAME" VARCHAR2(600 BYTE), 
	"AMOUNT" NUMBER(14,2), 
	"DISCOUNT" NUMBER(14,2), 
	"CHARGE" NUMBER(14,2), 
	"VATRATE" NUMBER(14,2), 
	"VAT" NUMBER(14,2), 
	"TOTALCHARGE" NUMBER(14,2), 
	"DEDUCTION" NUMBER(14,2), 
	"AFTERSALEDISCOUNT" NUMBER(14,2), 
	"BALANCEDUE" NUMBER(14,2), 
	"RECEIVED" NUMBER(14,2), 
	"CHANGE" NUMBER(14,2), 
	"ADVANCED" NUMBER(14,2), 
	"REMARK" VARCHAR2(200 BYTE), 
	"PROMOTION" VARCHAR2(200 BYTE), 
	"REPRINT" NUMBER(*,0), 
	"CANCELREASON" VARCHAR2(1000 BYTE), 
	"CANCELDTTM" TIMESTAMP (6), 
	"CANCELEDBY" VARCHAR2(40 BYTE), 
	"ATTRIBUTES" VARCHAR2(40 BYTE), 
	"ENDOFDAYDTTM" VARCHAR2(40 BYTE), 
	"ISENDOFDAY" NUMBER(*,0), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(40 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"BILLING_GROUP" VARCHAR2(255 BYTE), 
	"BILLING_GROUP_FULL" VARCHAR2(255 BYTE), 
	"LANGUAGE" VARCHAR2(20 BYTE), 
	"REF1" VARCHAR2(30 BYTE), 
	"CUST_CATEGORY_DESC" VARCHAR2(100 BYTE), 
	"BILLING_SERVICE_NAME" VARCHAR2(150 BYTE), 
	"EXC_DISCOUNT" NUMBER(14,2), 
	"AFTERSALEDISC_VAT" NUMBER(14,2), 
	"FLG_HEADER" VARCHAR2(1 BYTE), 
	"REF_RECEIPTNO" VARCHAR2(40 BYTE), 
	"SHOP_CLOSING_ID" NUMBER, 
	"EXCHANGE_RATE" NUMBER(14,4), 
	"CURRENCYCODE" VARCHAR2(10 BYTE), 
	"FEES_INCOME" NUMBER(14,2), 
	"TAXID_AGENT" VARCHAR2(30 BYTE), 
	"REF2" VARCHAR2(30 BYTE), 
	"CLOSING_ID" NUMBER, 
	"EMP_CLOSING_ID" NUMBER, 
	"POSID" NUMBER(38,0), 
	"POSNO" VARCHAR2(20 BYTE), 
	"FULL_PAYMENT" VARCHAR2(20 BYTE), 
	"SPECIAL_DISCOUNT" NUMBER(14,2), 
	 CONSTRAINT "PK_CORRECEIPT" PRIMARY KEY ("RECEIPTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

   COMMENT ON COLUMN "EPIS"."CORRECEIPT"."FLG_HEADER" IS '1ใบเสร็จรับเงิน/ใบกำกับภาษี 2ใบเสร็จรับเงิน 3ใบกำกับภาษี';
   COMMENT ON COLUMN "EPIS"."CORRECEIPT"."FULL_PAYMENT" IS 'จ่ายเต็มใส่ F , จ่ายบางส่วนใส่ P';

--////////////////////////////////////////////////////////////////TABLE TRSCHEQUEREF//////////////////////////////////////////////////////////--
--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."TRSCHEQUEREF" 
   (	"CHEQUEREFID" NUMBER(*,0) NOT NULL ENABLE, 
	"PAYMENTREFID" NUMBER(*,0), 
	"CHEQUENO" VARCHAR2(40 BYTE), 
	"PUBLISHERID" VARCHAR2(20 BYTE), 
	"PUBLISHER" VARCHAR2(300 BYTE), 
	"BRANCH" VARCHAR2(300 BYTE), 
	"ISSUEDATE" DATE, 
	"AMOUNT" NUMBER(14,2), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"PAYMENTID" NUMBER(*,0), 
	"CHEQUEDATE" TIMESTAMP (6), 
	"BOUNCE_CHEQUE_DATE" TIMESTAMP (6), 
	"REVERSE_AR_DATE" TIMESTAMP (6), 
	"BOUNCE_STATUS" VARCHAR2(20 BYTE), 
	 CONSTRAINT "PK_TRSCHEQUEREF" PRIMARY KEY ("CHEQUEREFID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE, 
	 CONSTRAINT "FK_CHEPAY_PAYMENTREFID" FOREIGN KEY ("PAYMENTREFID")
	  REFERENCES "EPIS"."TRSPAYMENTREF" ("PAYMENTREFID") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

--////////////////////////////////////////////////////////////////TABLE MAP_GL_SERVICE_TYPE//////////////////////////////////////////////////////////--
--##########CREATE TABLE###########--

  CREATE TABLE "EPIS"."MAP_GL_SERVICE_TYPE" 
   (	"SERVICE_CODE" VARCHAR2(100 BYTE) NOT NULL ENABLE, 
	"GL_CODE" VARCHAR2(100 BYTE), 
	"PRODUCT_CODE" VARCHAR2(50 BYTE), 
	"PRODUCT_NAME" VARCHAR2(100 BYTE), 
	"SUB_PRODUCT_CODE" VARCHAR2(50 BYTE), 
	"SUB_PRODUCT_NAME" VARCHAR2(100 BYTE), 
	"SERVICE_NAME" VARCHAR2(400 BYTE), 
	"REVENUE_TYPE_CODE" NUMBER, 
	"REVENUE_TYPE_NAME" VARCHAR2(100 BYTE), 
	"SEGMENT_CODE" NUMBER, 
	"SEGMENT_NAME" VARCHAR2(50 BYTE), 
	"STATUS" NUMBER, 
	"CREATE_BY" VARCHAR2(50 BYTE), 
	"CREATE_DATE" DATE, 
	"UPDATE_BY" VARCHAR2(50 BYTE), 
	"UPDATE_DATE" DATE, 
	"SOURCE" VARCHAR2(50 BYTE), 
	"SERVICE_TYPE" VARCHAR2(50 BYTE), 
	 CONSTRAINT "MAP_GL_SERVICE_CODE_PK" PRIMARY KEY ("SERVICE_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;

--////////////////////////////////////////////////////////////////TABLE TMPINVOICE//////////////////////////////////////////////////////////--
--##########CREATE TABLE###########--
  CREATE TABLE "EPIS"."TMPINVOICE" 
   (	"INVOICEID" NUMBER(*,0) NOT NULL ENABLE, 
	"PAYMENTID" NUMBER(*,0), 
	"RECEIPTID" NUMBER(*,0), 
	"ACCOUNTID" NUMBER(*,0), 
	"INVOICENO" VARCHAR2(30 BYTE), 
	"PAYMENTTYPE" VARCHAR2(40 BYTE), 
	"KENAN" VARCHAR2(100 BYTE), 
	"CURRENCYCODE" VARCHAR2(10 BYTE), 
	"ISSUEDATE" DATE, 
	"DUEDATE" DATE, 
	"AMOUNT" NUMBER(14,2), 
	"DISCOUNT" NUMBER(14,2), 
	"CHARGE" NUMBER(14,2), 
	"VATRATE" NUMBER(14,2), 
	"VAT" NUMBER(14,2), 
	"TOTALCHARGE" NUMBER(14,2), 
	"DEDUCTION" NUMBER(14,2), 
	"BALANCEDUE" NUMBER(14,2), 
	"AFTERSALEDISCOUNT" NUMBER(14,2), 
	"RECEIVED" NUMBER(14,2), 
	"CHANGE" NUMBER(14,2), 
	"ADVANCED" NUMBER(14,2), 
	"DEBTAMOUNT" NUMBER(14,2), 
	"STATUS" VARCHAR2(20 BYTE), 
	"BILLCYCLE" VARCHAR2(200 BYTE), 
	"CANCELDTTM" TIMESTAMP (6), 
	"CANCELEDBY" VARCHAR2(40 BYTE), 
	"ATTRIBUTES" VARCHAR2(40 BYTE), 
	"UPDATEDTTM" TIMESTAMP (6), 
	"UPDATESYSTEM" CHAR(3 BYTE), 
	"UPDATEUSER" VARCHAR2(32 BYTE), 
	"VERSIONSTAMP" NUMBER(*,0), 
	"SUBNO" VARCHAR2(100 BYTE), 
	"DISC_TYPE" VARCHAR2(2 BYTE), 
	"AFTERSALEDISC_VAT" NUMBER(14,2), 
	"DISC_APPR_USER" VARCHAR2(50 BYTE), 
	"SOURCE" VARCHAR2(20 BYTE), 
	"CURRANCY_AR" VARCHAR2(20 BYTE), 
	"EXCH_RATE_AR" NUMBER(14,4), 
	"EXCH_RATE_DATE_AR" TIMESTAMP (6), 
	 CONSTRAINT "PK_TMPINVOICE" PRIMARY KEY ("INVOICEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA"  ENABLE, 
	 CONSTRAINT "FK_ACCINV_ACCOUNTID" FOREIGN KEY ("ACCOUNTID")
	  REFERENCES "EPIS"."TMPACCOUNT" ("ACCOUNTID") ENABLE, 
	 CONSTRAINT "FK_PAYINV_PAYMENTID" FOREIGN KEY ("PAYMENTID")
	  REFERENCES "EPIS"."CORPAYMENT" ("PAYMENTID") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "EPIS_DATA" ;


/*##########################################################################################################################################
#                                                          			PROCIDURCE                                                   		   #
############################################################################################################################################*/
/*##########################################################################################################################################
#                                                          PROCIDURCE DW_PD_IBACSS_DEV                                                     #
############################################################################################################################################*/

create or replace PROCEDURE DW_PD_IBACSS_DEV(PARAM_PAYMENT_ID NUMBER) AS 
/******************************************************************************
  

******************************************************************************/
--DECLARE
--INS IS FOR INSERT RECORD
    INS_CHARGE   NUMBER(14,4); 
    INS_VAT_AMOUNT   NUMBER(14,4);
    INS_TOTAL_AMOUNT   NUMBER(14,4);
    RV_AMOUNT   NUMBER(14,4);
    CHARGE      NUMBER(14,4);
    TOTAL_AMOUNT   NUMBER(14,4);
    PAYMENT_ID VARCHAR2(20);
    VAT_AMOUNT NUMBER(14,4);
--    TOTAL_CHARGE NUMBER(14,2);
    
    --FOR FIND BALANCE
    BL_AMOUNT NUMBER(14,4);
    BL_TOTAL_AMOUNT NUMBER(14,4);
    BL_VAT NUMBER(14,4);
    
    
    --for calculate
    SUM_AMOUNT NUMBER(14,4);
    SUM_TOTAL_AMOUNT NUMBER(14,4);
    SUM_VAT NUMBER(14,4);
    
    --PARAM RETURN
    STATUS NUMBER;
    
    --SOURCE_TABLE
    SOURCE_TABLE VARCHAR2(20) := 'IBACSS';
--------------------------------------------------------------------------
CURSOR C1 IS 
select PAYMENTID, RECEIPTNAME  from correceipt 
;
--CHARGE
CURSOR C_CHARGE IS 
select CHARGE  from correceipt 
;
--INVOICENO
CURSOR C_INVOICENO IS 
SELECT INVOICENO,CHARGE,VAT,TOTALCHARGE FROM TMPINVOICE
WHERE PAYMENTID = PARAM_PAYMENT_ID

--INVOICENO IN (
----'220547964',
----'220547861',
----'220547941',
----'220547959',
----'220547958',
----'220547859',
--'220547840'
----,
----'220547717',
----'220547867',
----'220547930'
--)
--where INVOICENO = '220547840'
;

CURSOR C_Revernue IS
select 
    cpm.DEDUCTION as DEDUCTION,
    cpm.DISCOUNT AS DISCOUNT,
    tiv.INVOICEID AS INVOICEID,
    tiv.PAYMENTID AS PAYMENTID, 
    tiv.INVOICENO AS INVOICENO,
    tiv.CHARGE AS INV_AMOUNT,
    tiv.VAT AS INV_VAT,
    ib.ID AS ID,
    ib.PRODUCT_CODE AS PRODUCT_CODE,
    ib.SUB_PRODUCT_CODE AS SUB_PRODUCT_CODE,
    ib.AMOUNT AS AMOUNT,
    ib.VAT_AMOUNT AS VAT_AMOUNT,
    ib.TOTAL_AMOUNT AS TOTAL_AMOUNT,
    ib.SERVICE_PRIORITY_PRODUCT AS SERVICE_PRIORITY_PRODUCT
from TMPINVOICE tiv, CORPAYMENT cpm, inv_summary_sap_ibacss ib
where cpm.PAYMENTID = tiv.PAYMENTID
and to_char(ib.bi_ref) = tiv.invoiceno
--and tiv.source = 'ib'
--and tiv.INVOICENO = '220547840'
AND tiv.PAYMENTID = PARAM_PAYMENT_ID
--tiv.INVOICENO IN (
----'220547964',
----'220547861',
----'220547941',
----'220547959',
----'220547958',
----'220547859',
--'220547840'
----,
----'220547717',
----'220547867',
----'220547930'
--)
order by ib.SERVICE_PRIORITY_PRODUCT
;

BEGIN    
------------------------INVOICENO-----------------------------------------------

FOR INV IN C_INVOICENO
LOOP
    --DECLARE CHARGE FOR CALCULATION
    CHARGE := INV.CHARGE; --
    VAT_AMOUNT := INV.VAT;
    TOTAL_AMOUNT := INV.TOTALCHARGE;
    
    --FOR FIND BALANCE DEL 
--    BL_AMOUNT := INV.CHARGE;
--    BL_TOTAL_AMOUNT := INV.TOTALCHARGE;
    
    DBMS_OUTPUT.PUT_LINE('INVOICENO========================>>' || INV.INVOICENO);
    DBMS_OUTPUT.PUT_LINE('INVOICE_CHARGE=====================>>' || INV.CHARGE);
    DBMS_OUTPUT.PUT_LINE('INVOICE VAT================================>>' || VAT_AMOUNT);    
    DBMS_OUTPUT.PUT_LINE('INVOICE TOTAL_AMOUNT=====================>>' || TOTAL_AMOUNT);
    DBMS_OUTPUT.PUT_LINE('.');
   
----------------------------------PRODUCT --------------------------------------
    FOR PRO IN C_Revernue
    LOOP
    IF INV.INVOICENO = PRO.INVOICENO THEN
    DBMS_OUTPUT.PUT_LINE('CHARGE PRO>>>>>>>>>>' || PRO.PRODUCT_CODE);
    DBMS_OUTPUT.PUT_LINE('VAT_AMOUNT PRO>>>>>>>>>>' || PRO.VAT_AMOUNT);
-----------------------CALCULATION IF----------------------------------------
        IF  CHARGE = 0 THEN 
        
        DBMS_OUTPUT.PUT('IF AMOUNT*****');
        DBMS_OUTPUT.PUT_LINE(PRO.AMOUNT);
        
        --SET VALUES
        CHARGE := 0;
        INS_CHARGE := 0;
        VAT_AMOUNT :=0;
        TOTAL_AMOUNT := 0;
        INS_TOTAL_AMOUNT := 0;
        
        DBMS_OUTPUT.PUT_LINE('IF TOTAL_AMOUNT>>>>>>>>>>' || CHARGE);
        DBMS_OUTPUT.PUT_LINE('IF INS_CHARGE>>>>>>>' || INS_CHARGE);
        DBMS_OUTPUT.PUT_LINE('IF INS_TOTAL_AMOUNT>>>>>>>' || INS_TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('IF VAT_AMOUNT>>>>>>>' || VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('IF TOTAL_AMOUNT>>>>>>>' || TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('..');          
-----------------------END CALCULATION IF------------------------------------

-----------------------CALCULATION ELSIF----------------------------------------
        ELSIF PRO.AMOUNT <= CHARGE  THEN 
--        AND PRO.VAT_AMOUNT <= VAT_AMOUNT AND PRO.TOTAL_AMOUNT <= TOTAL_AMOUNT

        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.AMOUNT///////////////' || PRO.AMOUNT);
        
        --CALCULATION
        --CHARGE
        BL_AMOUNT := CHARGE;
        CHARGE := CHARGE - PRO.AMOUNT;
        INS_CHARGE := BL_AMOUNT - CHARGE;
        
        --VAT_AMOUNT
        BL_VAT := VAT_AMOUNT;
        VAT_AMOUNT := VAT_AMOUNT - PRO.VAT_AMOUNT;
        INS_VAT_AMOUNT := BL_VAT - VAT_AMOUNT;
        
        --TOTAL_AMOUNT
        BL_TOTAL_AMOUNT := TOTAL_AMOUNT;
        TOTAL_AMOUNT := TOTAL_AMOUNT - PRO.TOTAL_AMOUNT;
        INS_TOTAL_AMOUNT := BL_TOTAL_AMOUNT - TOTAL_AMOUNT;
        
        DBMS_OUTPUT.PUT_LINE('ELSIF CHARGE ยอดจ่ายระดับ invoice>>>>>>>>>>' || CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSIF INS_CHARGE///////////////////////////>' || INS_CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.VAT_AMOUNT####' || PRO.VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF INS_VAT_AMOUNT>>>>>>>' || INS_VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.TOTAL_AMOUNT####' || PRO.TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF INS_TOTAL_AMOUNT/////////////////////>' || INS_TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('..'); 
-----------------------END CALCULATION ELSIF------------------------------------

-----------------------CALCULATION ELSE ----------------------------------------
        ELSE
        DBMS_OUTPUT.PUT_LINE('##ELSE##');
        
        DBMS_OUTPUT.PUT_LINE('ELSE AMOUNT*****' || PRO.AMOUNT);
        
        --CALCULATION
        --CHARGE
         
        SUM_AMOUNT :=  PRO.AMOUNT - CHARGE;
        INS_CHARGE := PRO.AMOUNT - SUM_AMOUNT;
        CHARGE := 0;
        
        --VAT_AMOUNT
         
        SUM_VAT := PRO.VAT_AMOUNT - VAT_AMOUNT;
        INS_VAT_AMOUNT := PRO.VAT_AMOUNT - SUM_VAT;
        VAT_AMOUNT := 0;
        
        --TOTAL_AMOUNT
         
        SUM_TOTAL_AMOUNT := PRO.TOTAL_AMOUNT - TOTAL_AMOUNT;
        INS_TOTAL_AMOUNT := PRO.TOTAL_AMOUNT - SUM_TOTAL_AMOUNT;
        TOTAL_AMOUNT := 0;
        
--        DBMS_OUTPUT.PUT_LINE('ELSE# RV_AMOUNT>>>>>>>' || PRO.AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF CHARGE ยอดจ่ายระดับ invoice>>>>>>>>>>>>' || CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSE# INS_CHARGE//////////////////////////>' || INS_CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.VAT_AMOUNT####' || PRO.VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSE# INS_VAT_AMOUNT//////////////////////>' || INS_VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSE# PRO.TOTAL_AMOUNT####' || PRO.TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSE# INS_TOTAL_AMOUNT////////////////////>' || INS_TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('..');
-----------------------CALCULATION ELSE ----------------------------------------
        END IF;

-----------------------------INSERT INTO DW_REVERNUE_PRODUCT--------------------
        DBMS_OUTPUT.PUT_LINE('WRITE========================');
        
         INSERT INTO DW_REVERNUE_PRODUCT 
         (--"ID",
         "PAYMENT_ID","INVOICEID","SOURCE_ID","SOURCE_TABLE","PRODUCT_CODE","SUB_PRODUCT_CODE",
         "AMOUNT","DISCOUNT","VAT","TOTAL_AMOUNT","DEDUCTION","REMARK","CREATE_BY","CREATE_DATE",
         "UPDATE_BY","UPDATE_DATE","RECORD_STATUS")      
         VALUES (PRO.PAYMENTID,PRO.INVOICEID,PRO.ID,SOURCE_TABLE,TO_CHAR(PRO.PRODUCT_CODE),PRO.SUB_PRODUCT_CODE,INS_CHARGE,PRO.DISCOUNT,INS_VAT_AMOUNT,INS_TOTAL_AMOUNT,PRO.DEDUCTION,'REMARK','CREATE_BY',SYSDATE,'UPDATE_DATE',SYSDATE,'A');
         COMMIT;

         DBMS_OUTPUT.PUT_LINE('INSERT ----> SUCCESS!');
         DBMS_OUTPUT.PUT_LINE('.');
         DBMS_OUTPUT.PUT_LINE('.');
-----------------------------END INSERT INTO DW_REVERNUE_PRODUCT----------------
         
    END IF;   
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('INVOICENO========================');
    DBMS_OUTPUT.PUT_LINE('..');
----------------------------------END PRODUCT ----------------------------------


-------------------------------CALL PROCIDURES----------------------------------
--DBMS_OUTPUT.PUT_LINE('//////////////////////////////////////////////////////////DW_PT_IBACSS_DEV//////////////////////////////////////////////////////////');
--DBMS_OUTPUT.PUT_LINE('..');
--
--DW_PT_IBACSS_DEV(PARAM_PAYMENT_ID,:STATUS);

--IF STATUS = 1 THEN  
--
--DBMS_OUTPUT.PUT_LINE('//////////////////////////////////////////////////////////DW_PT_IBACSS_WT_DEV//////////////////////////////////////////////////////////');
--DBMS_OUTPUT.PUT_LINE('..');
--DW_PT_IBACSS_WT_DEV(PARAM_PAYMENT_ID);
--
--ELSE
--
--DBMS_OUTPUT.PUT_LINE('//////////////////////////////////////////////////////////DW_PT_IBACSS_WT_DEV ELSE//////////////////////////////////////////////////////////');
--
--END IF;




-------------------------------CALL PROCIDURES----------------------------------


END LOOP;
--------------------------END INVOICENO-----------------------------------------
END DW_PD_IBACSS_DEV;

/*##########################################################################################################################################
#                                                          PROCIDURCE DW_PD_INV_SOURCE_DEV                                                     #
############################################################################################################################################*/
create or replace PROCEDURE DW_PD_INV_SOURCE_DEV(PARAM_PAYMENT_ID NUMBER) AS 
/******************************************************************************
  

******************************************************************************/
--DECLARE
--INS IS FOR INSERT RECORD
    INS_CHARGE   NUMBER(14,4); 
    INS_VAT_AMOUNT   NUMBER(14,4);
    INS_TOTAL_AMOUNT   NUMBER(14,4);
    RV_AMOUNT   NUMBER(14,4);
    CHARGE      NUMBER(14,4);
    TOTAL_AMOUNT   NUMBER(14,4);
    PAYMENT_ID VARCHAR2(20);
    VAT_AMOUNT NUMBER(14,4);
--    TOTAL_CHARGE NUMBER(14,2);
    
    --FOR FIND BALANCE
    BL_AMOUNT NUMBER(14,4);
    BL_TOTAL_AMOUNT NUMBER(14,4);
    BL_VAT NUMBER(14,4);
    
    
    --for calculate
    SUM_AMOUNT NUMBER(14,4);
    SUM_TOTAL_AMOUNT NUMBER(14,4);
    SUM_VAT NUMBER(14,4);
    
    --PARAM RETURN
    STATUS NUMBER;
    
    --SOURCE_TABLE
    SOURCE_TABLE VARCHAR2(20) := 'OTBOSS';
--------------------------------------------------------------------------
CURSOR C1 IS 
select PAYMENTID, RECEIPTNAME  from correceipt 
;
--CHARGE
CURSOR C_CHARGE IS 
select CHARGE  from correceipt 
;
--INVOICENO
CURSOR C_INVOICENO IS 
SELECT INVOICENO,CHARGE,VAT,TOTALCHARGE FROM TMPINVOICE
WHERE PAYMENTID = PARAM_PAYMENT_ID

--INVOICENO IN (
----'220547964',
----'220547861',
----'220547941',
----'220547959',
----'220547958',
----'220547859',
--'220547840'
----,
----'220547717',
----'220547867',
----'220547930'
--)
--where INVOICENO = '220547840'
;

CURSOR C_Revernue IS
select 
    cpm.DEDUCTION as DEDUCTION,
    cpm.DISCOUNT AS DISCOUNT,
    tiv.INVOICEID AS INVOICEID,
    tiv.PAYMENTID AS PAYMENTID, 
    tiv.INVOICENO AS INVOICENO,
    tiv.CHARGE AS INV_AMOUNT,
    tiv.VAT AS INV_VAT,
    INS.ID AS ID,
    INS.PRODUCT_CODE AS PRODUCT_CODE,
    INS.SUB_PRODUCT_CODE AS SUB_PRODUCT_CODE,
    INS.AMOUNT_AR AS AMOUNT,
    INS.VAT_AMOUNT_AR AS VAT_AMOUNT,
    INS.TOTAL_AMOUNT_AR AS TOTAL_AMOUNT,
    INS.SERVICE_PRIORITY_PRODUCT AS SERVICE_PRIORITY_PRODUCT,
    INS.SOURCE AS SOURCE_TABLE
from TMPINVOICE tiv, CORPAYMENT cpm, INV_SOURCE INS
where cpm.PAYMENTID = tiv.PAYMENTID
and to_char(INS.AR_REF) = tiv.invoiceno
AND tiv.PAYMENTID = PARAM_PAYMENT_ID
AND RECORD_STATUS  = 'A' 
order by INS.SERVICE_PRIORITY_PRODUCT;


BEGIN    
------------------------INVOICENO-----------------------------------------------

FOR INV IN C_INVOICENO
LOOP
    --DECLARE CHARGE FOR CALCULATION
    CHARGE := INV.CHARGE; --
    VAT_AMOUNT := INV.VAT;
    TOTAL_AMOUNT := INV.TOTALCHARGE;
    
    --FOR FIND BALANCE DEL 
--    BL_AMOUNT := INV.CHARGE;
--    BL_TOTAL_AMOUNT := INV.TOTALCHARGE;
    
    DBMS_OUTPUT.PUT_LINE('INVOICENO========================>>' || INV.INVOICENO);
    DBMS_OUTPUT.PUT_LINE('INVOICE_CHARGE=====================>>' || INV.CHARGE);
    DBMS_OUTPUT.PUT_LINE('INVOICE VAT================================>>' || VAT_AMOUNT);    
    DBMS_OUTPUT.PUT_LINE('INVOICE TOTAL_AMOUNT=====================>>' || TOTAL_AMOUNT);
    DBMS_OUTPUT.PUT_LINE('.');
   
----------------------------------PRODUCT --------------------------------------
    FOR PRO IN C_Revernue
    LOOP
    IF INV.INVOICENO = PRO.INVOICENO THEN
    DBMS_OUTPUT.PUT_LINE('CHARGE PRO>>>>>>>>>>' || PRO.PRODUCT_CODE);
    DBMS_OUTPUT.PUT_LINE('VAT_AMOUNT PRO>>>>>>>>>>' || PRO.VAT_AMOUNT);
-----------------------CALCULATION IF----------------------------------------
        IF  CHARGE = 0 THEN 
        
        DBMS_OUTPUT.PUT('IF AMOUNT*****');
        DBMS_OUTPUT.PUT_LINE(PRO.AMOUNT);
        
        --SET VALUES
        CHARGE := 0;
        INS_CHARGE := 0;
        VAT_AMOUNT :=0;
        TOTAL_AMOUNT := 0;
        INS_TOTAL_AMOUNT := 0;
        
        DBMS_OUTPUT.PUT_LINE('IF TOTAL_AMOUNT>>>>>>>>>>' || CHARGE);
        DBMS_OUTPUT.PUT_LINE('IF INS_CHARGE>>>>>>>' || INS_CHARGE);
        DBMS_OUTPUT.PUT_LINE('IF INS_TOTAL_AMOUNT>>>>>>>' || INS_TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('IF VAT_AMOUNT>>>>>>>' || VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('IF TOTAL_AMOUNT>>>>>>>' || TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('..');          
-----------------------END CALCULATION IF------------------------------------

-----------------------CALCULATION ELSIF----------------------------------------
        ELSIF PRO.AMOUNT <= CHARGE  THEN 
--        AND PRO.VAT_AMOUNT <= VAT_AMOUNT AND PRO.TOTAL_AMOUNT <= TOTAL_AMOUNT

        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.AMOUNT///////////////' || PRO.AMOUNT);
        
        --CALCULATION
        --CHARGE
        BL_AMOUNT := CHARGE;
        CHARGE := CHARGE - PRO.AMOUNT;
        INS_CHARGE := BL_AMOUNT - CHARGE;
        
        --VAT_AMOUNT
        BL_VAT := VAT_AMOUNT;
        VAT_AMOUNT := VAT_AMOUNT - PRO.VAT_AMOUNT;
        INS_VAT_AMOUNT := BL_VAT - VAT_AMOUNT;
        
        --TOTAL_AMOUNT
        BL_TOTAL_AMOUNT := TOTAL_AMOUNT;
        TOTAL_AMOUNT := TOTAL_AMOUNT - PRO.TOTAL_AMOUNT;
        INS_TOTAL_AMOUNT := BL_TOTAL_AMOUNT - TOTAL_AMOUNT;
        
        DBMS_OUTPUT.PUT_LINE('ELSIF CHARGE ยอดจ่ายระดับ invoice>>>>>>>>>>' || CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSIF INS_CHARGE///////////////////////////>' || INS_CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.VAT_AMOUNT####' || PRO.VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF INS_VAT_AMOUNT>>>>>>>' || INS_VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.TOTAL_AMOUNT####' || PRO.TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF INS_TOTAL_AMOUNT/////////////////////>' || INS_TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('..'); 
-----------------------END CALCULATION ELSIF------------------------------------

-----------------------CALCULATION ELSE ----------------------------------------
        ELSE
        DBMS_OUTPUT.PUT_LINE('##ELSE##');
        
        DBMS_OUTPUT.PUT_LINE('ELSE AMOUNT*****' || PRO.AMOUNT);
        
        --CALCULATION
        --CHARGE
         
        SUM_AMOUNT :=  PRO.AMOUNT - CHARGE;
        INS_CHARGE := PRO.AMOUNT - SUM_AMOUNT;
        CHARGE := 0;
        
        --VAT_AMOUNT
         
        SUM_VAT := PRO.VAT_AMOUNT - VAT_AMOUNT;
        INS_VAT_AMOUNT := PRO.VAT_AMOUNT - SUM_VAT;
        VAT_AMOUNT := 0;
        
        --TOTAL_AMOUNT
         
        SUM_TOTAL_AMOUNT := PRO.TOTAL_AMOUNT - TOTAL_AMOUNT;
        INS_TOTAL_AMOUNT := PRO.TOTAL_AMOUNT - SUM_TOTAL_AMOUNT;
        TOTAL_AMOUNT := 0;
        
--        DBMS_OUTPUT.PUT_LINE('ELSE# RV_AMOUNT>>>>>>>' || PRO.AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSIF CHARGE ยอดจ่ายระดับ invoice>>>>>>>>>>>>' || CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSE# INS_CHARGE//////////////////////////>' || INS_CHARGE);
        DBMS_OUTPUT.PUT_LINE('ELSIF PRO.VAT_AMOUNT####' || PRO.VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSE# INS_VAT_AMOUNT//////////////////////>' || INS_VAT_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSE# PRO.TOTAL_AMOUNT####' || PRO.TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('ELSE# INS_TOTAL_AMOUNT////////////////////>' || INS_TOTAL_AMOUNT);
        DBMS_OUTPUT.PUT_LINE('..');
-----------------------CALCULATION ELSE ----------------------------------------
        END IF;

-----------------------------INSERT INTO DW_REVERNUE_PRODUCT--------------------
        DBMS_OUTPUT.PUT_LINE('WRITE========================');
        
         INSERT INTO DW_REVERNUE_PRODUCT 
         (--"ID",
         "PAYMENT_ID","INVOICEID","SOURCE_ID","SOURCE_TABLE","PRODUCT_CODE","SUB_PRODUCT_CODE",
         "AMOUNT","DISCOUNT","VAT","TOTAL_AMOUNT","DEDUCTION","REMARK","CREATE_BY","CREATE_DATE",
         "UPDATE_BY","UPDATE_DATE","RECORD_STATUS")      
         VALUES (PRO.PAYMENTID,PRO.INVOICEID,PRO.ID,PRO.SOURCE_TABLE,TO_CHAR(PRO.PRODUCT_CODE),PRO.SUB_PRODUCT_CODE,INS_CHARGE,PRO.DISCOUNT,INS_VAT_AMOUNT,INS_TOTAL_AMOUNT,PRO.DEDUCTION,'REMARK','CREATE_BY',SYSDATE,'UPDATE_DATE',SYSDATE,'A');
         COMMIT;

         DBMS_OUTPUT.PUT_LINE('INSERT ----> SUCCESS!');
         DBMS_OUTPUT.PUT_LINE('.');
         DBMS_OUTPUT.PUT_LINE('.');
-----------------------------END INSERT INTO DW_REVERNUE_PRODUCT----------------
         
    END IF;   
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('INVOICENO========================');
    DBMS_OUTPUT.PUT_LINE('..');
----------------------------------END PRODUCT ----------------------------------


-------------------------------CALL PROCIDURES----------------------------------
--DBMS_OUTPUT.PUT_LINE('//////////////////////////////////////////////////////////DW_PT_IBACSS_DEV//////////////////////////////////////////////////////////');
--DBMS_OUTPUT.PUT_LINE('..');
--
--DW_PT_IBACSS_DEV(PARAM_PAYMENT_ID,:STATUS);

--IF STATUS = 1 THEN  
--
--DBMS_OUTPUT.PUT_LINE('//////////////////////////////////////////////////////////DW_PT_IBACSS_WT_DEV//////////////////////////////////////////////////////////');
--DBMS_OUTPUT.PUT_LINE('..');
--DW_PT_IBACSS_WT_DEV(PARAM_PAYMENT_ID);
--
--ELSE
--
--DBMS_OUTPUT.PUT_LINE('//////////////////////////////////////////////////////////DW_PT_IBACSS_WT_DEV ELSE//////////////////////////////////////////////////////////');
--
--END IF;




-------------------------------CALL PROCIDURES----------------------------------


END LOOP;
--------------------------END INVOICENO-----------------------------------------
END DW_PD_INV_SOURCE_DEV;


/*##########################################################################################################################################
#                                                          PROCIDURCE DW_PT_IBACSS_DEV                                                     #
############################################################################################################################################*/

create or replace PROCEDURE DW_PT_IBACSS_DEV(PARAM_PAYMENT_ID NUMBER) AS 
/******************************************************************************
                            
                            DW_PAY_TYPE_IBACSS  

******************************************************************************/
--FOR SET VALUES
T_BALANCE   NUMBER(14,4); 
P_BALANCE   NUMBER(14,4); 
T   NUMBER(14,4); 
P   NUMBER(14,4); 

--status
COUN_STATUS NUMBER;

--FOR INSRT 
INS_DW_REV_PRO_ID	NUMBER(38,0);
INS_PAY_TYPE_CODE	VARCHAR2(20 BYTE);
INS_TOTAL_AMOUNT	NUMBER(14,4);
INS_METHODID NUMBER;
INS_GROUP_KEY VARCHAR2(20);
--FORSET COUNT SIZE SELECT DATA
COUNTS   NUMBER;
--/////////////////////////////////PAY TYPE //////////////////////////////////--
CURSOR PT IS 
SELECT 
PAY_TYPE_CODE, TOTAL_AMOUNT_PAID
FROM (SELECT 
--ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
--ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
MSD.GROUP_KEY AS GROUP_KEY,
TRM.CODE AS PAY_TYPE_CODE,
TRM.AMOUNT AS TOTAL_AMOUNT_PAID
FROM TRSMETHOD TRM 
LEFT JOIN MASTER_DATA MSD ON TRM.CODE = MSD.KEY
where TRM.PAYMENTID = PARAM_PAYMENT_ID
AND TRM.CODE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
--AND ROWNUM = 1
ORDER BY MSD.PROPERTY_2)
WHERE ROWNUM = 1 ;
 
 
--/////////////////////////////////PRODUCT //////////////////////////////////--
CURSOR PD IS
--SELECT 
--DRP.ID AS DW_REVERNUE_PRODUCT_ID,
--DRP.PAYMENT_ID AS PAYMENT_ID,
--DRP.INVOICEID AS INVOICEID,
--DRP.SOURCE_ID AS SOURCE_ID,
--DRP.SOURCE_TABLE AS SOURCE_TABLE,
--DRP.PRODUCT_CODE AS PRODUCT_CODE,
--DRP.SUB_PRODUCT_CODE AS SUB_PRODUCT_CODE,
--DRP.AMOUNT AS AMOUNT,
--DRP.DISCOUNT AS DISCOUNT,
--DRP.VAT AS VAT,
--DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT,
--DRP.DEDUCTION AS DEDUCTION
--FROM DW_REVERNUE_PRODUCT DRP WHERE DRP.PAYMENT_ID = '2936' 
--ORDER BY DRP.PRODUCT_CODE;

SELECT 
DW_REVERNUE_PRODUCT_ID,PAYMENT_ID,INVOICEID,
SOURCE_ID,SOURCE_TABLE,PRODUCT_CODE,SUB_PRODUCT_CODE,
AMOUNT,DISCOUNT,VAT,TOTAL_AMOUNT,DEDUCTION
FROM
(SELECT 
DRP.ID AS DW_REVERNUE_PRODUCT_ID,
DRP.PAYMENT_ID AS PAYMENT_ID,
DRP.INVOICEID AS INVOICEID,
DRP.SOURCE_ID AS SOURCE_ID,
DRP.SOURCE_TABLE AS SOURCE_TABLE,
DRP.PRODUCT_CODE AS PRODUCT_CODE,
DRP.SUB_PRODUCT_CODE AS SUB_PRODUCT_CODE,
DRP.AMOUNT AS AMOUNT,
DRP.DISCOUNT AS DISCOUNT,
DRP.VAT AS VAT,
DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT,
DRP.DEDUCTION AS DEDUCTION
FROM DW_REVERNUE_PRODUCT DRP 
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID 
AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
ORDER BY DRP.PRODUCT_CODE)
WHERE ROWNUM = 1;

--//////////////////////////////////////SELECT COUNT product//////////////////////////--
CURSOR ROW_NUM IS
SELECT COUNT(ID) FROM
(SELECT 
DRP.ID AS ID,
DRP.AMOUNT AS AMOUNT
FROM DW_REVERNUE_PRODUCT DRP 
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID 
AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
ORDER BY DRP.PRODUCT_CODE)
WHERE ROWNUM = 1;

--////////////////////////////BEGIN FOR DEVELOPER ////////////////////////////--

BEGIN

--///////////////////////////SET VALUE = 0 ///////////////////////////////////--
T_BALANCE  := 0;
P_BALANCE  := 0;
T  := 0;
P  := 0;

--/////////////////////SET DATA INTO  P PRODUCT///////////////////////////////--
SELECT DW_REV_PRO_ID,TOTAL_AMOUNT INTO INS_DW_REV_PRO_ID,P FROM
(SELECT 
DRP.ID AS DW_REV_PRO_ID,
DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT
FROM DW_REVERNUE_PRODUCT DRP 
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID
--'2936' 
AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
ORDER BY DRP.PRODUCT_CODE)
WHERE ROWNUM = 1;

DBMS_OUTPUT.PUT_LINE('//////////P///////////>' || P);


--////////////////////SET DATA INTO  T PAY_TYPE///////////////////////////////--
SELECT GROUP_KEY,METHODID,PAY_TYPE_CODE,TOTAL_AMOUNT_PAID INTO INS_GROUP_KEY,INS_METHODID,INS_PAY_TYPE_CODE,T 
FROM (SELECT 
--ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
--ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
MSD.GROUP_KEY AS GROUP_KEY,
TRM.METHODID AS METHODID,
TRM.CODE AS PAY_TYPE_CODE,
TRM.AMOUNT AS TOTAL_AMOUNT_PAID
FROM TRSMETHOD TRM 
LEFT JOIN MASTER_DATA MSD ON TRM.CODE = MSD.KEY
where TRM.PAYMENTID = PARAM_PAYMENT_ID
--'2936'
AND TRM.CODE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
--AND ROWNUM = 1
ORDER BY MSD.PROPERTY_2)
WHERE ROWNUM = 1 ;

DBMS_OUTPUT.PUT_LINE('//////////T///////////>' || T);

--///////////////////////////////////WHILE LOOP///////////////////////////////--
OPEN ROW_NUM;
FETCH ROW_NUM INTO COUNTS;
WHILE COUNTS <> 0 LOOP

--////////////////////////////////CHECK IF ELSE///////////////////////////////--
IF P  <= T THEN

DBMS_OUTPUT.PUT_LINE('//////////////////////////////////// IF P <= T ////////////////////////////////////////////>');

--///////////////////////////////INSERT IF////////////////////////////////////--
INS_TOTAL_AMOUNT  := P;
INSERT INTO DW_PAY_TYPE("DW_REVERNUE_PRODUCT_ID","METHOD_ID","PAY_TYPE_CODE","TOTAL_AMOUNT","GROUP_KEY")
VALUES (INS_DW_REV_PRO_ID,INS_METHODID,INS_PAY_TYPE_CODE,INS_TOTAL_AMOUNT,INS_GROUP_KEY);
COMMIT;

DBMS_OUTPUT.PUT_LINE('##############INSERT INS_GROUP_KEY##############' || INS_GROUP_KEY);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_METHODID##############' || INS_METHODID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_DW_REV_PRO_ID##############' || INS_DW_REV_PRO_ID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_PAY_TYPE_CODE##############' || INS_PAY_TYPE_CODE);
DBMS_OUTPUT.PUT_LINE('##############INSERT P##############' || P);
--//////////////////////////////END INSERT////////////////////////////////////--

T_BALANCE := T - P;
P_BALANCE := 0;

--////////////////////////////////NEXT P /////////////////////////////////////--

--/////////////////////SET DATA INTO  P PRODUCT///////////////////////////////--
            SELECT DW_REV_PRO_ID,TOTAL_AMOUNT INTO INS_DW_REV_PRO_ID,P FROM
            (SELECT 
            DRP.ID AS DW_REV_PRO_ID,
            DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT
            FROM DW_REVERNUE_PRODUCT DRP 
            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID
--            '2936' 
            AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
            INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
            ORDER BY DRP.PRODUCT_CODE)
            WHERE ROWNUM = 1;
            
            DBMS_OUTPUT.PUT_LINE('//////////NEXT IF P///////////>' || P);

p := p + p_balance;
t := t_balance;


--COUNTS := 0;

ELSE

DBMS_OUTPUT.PUT_LINE('//////////////////////////////////// ELSE P > T ////////////////////////////////////////////>');

--///////////////////////////////INSERT ELSE//////////////////////////////////--
INS_TOTAL_AMOUNT  := T;
INSERT INTO DW_PAY_TYPE("DW_REVERNUE_PRODUCT_ID","METHOD_ID","PAY_TYPE_CODE","TOTAL_AMOUNT","GROUP_KEY")
VALUES (INS_DW_REV_PRO_ID,INS_METHODID,INS_PAY_TYPE_CODE,INS_TOTAL_AMOUNT,INS_GROUP_KEY);
COMMIT;

DBMS_OUTPUT.PUT_LINE('##############INSERT INS_GROUP_KEY##############' || INS_GROUP_KEY);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_METHODID##############' || INS_METHODID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_DW_REV_PRO_ID##############' || INS_DW_REV_PRO_ID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_PAY_TYPE_CODE##############' || INS_PAY_TYPE_CODE);
DBMS_OUTPUT.PUT_LINE('##############INSERT P##############' || T);
--//////////////////////////////END INSERT ELSE///////////////////////////////--

T_BALANCE := 0;
P_BALANCE := P - T;

--////////////////////////////////NEXT T /////////////////////////////////////--
--////////////////////SET DATA INTO  T PAY_TYPE///////////////////////////////--
            SELECT GROUP_KEY,METHODID,PAY_TYPE_CODE,TOTAL_AMOUNT_PAID INTO INS_GROUP_KEY,INS_METHODID,INS_PAY_TYPE_CODE,T 
            FROM (SELECT 
            --ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
            --ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
            MSD.GROUP_KEY AS GROUP_KEY,
            TRM.METHODID AS METHODID,
            TRM.CODE AS PAY_TYPE_CODE,
            TRM.AMOUNT AS TOTAL_AMOUNT_PAID
            FROM TRSMETHOD TRM 
            LEFT JOIN MASTER_DATA MSD ON TRM.CODE = MSD.KEY
            where TRM.PAYMENTID = PARAM_PAYMENT_ID
--            '2936'
            AND TRM.CODE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
            INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'PAYTYPE')
            --AND ROWNUM = 1
            ORDER BY MSD.PROPERTY_2)
            WHERE ROWNUM = 1 ;
            
            DBMS_OUTPUT.PUT_LINE('//////////NEXT ELSE T///////////>' || T);
            
            
T := T + T_BALANCE;
P := P_BALANCE;	

END IF;
--//////////////////////////////END CHECK IF ELSE/////////////////////////////--

--DBMS_OUTPUT.PUT_LINE('///////' || COUNTS);
--COUNTS := 0;

----/////////////////////////////////RETURN//////////////////////////////////---

END LOOP;
CLOSE ROW_NUM;
--////////////////////////////////END WHILE LOOP//////////////////////////////--
--
--RETURN;
--DBMS_OUTPUT.PUT_LINE('////////////////////////RETURN////////////////////////' || STATUS);
--
--STATUS := 1;
--DBMS_OUTPUT.PUT_LINE('////////////////////////RETURN////////////////////////' || STATUS);

END DW_PT_IBACSS_DEV;

/*##########################################################################################################################################
#                                                          PROCIDURCE DW_PT_IBACSS_DEV                                                     #
############################################################################################################################################*/

create or replace PROCEDURE DW_PT_IBACSS_WT_DEV(PARAM_PAYMENT_ID NUMBER) AS 
/******************************************************************************
                            
                            DW_PAY_TYPE_IBACSS  

******************************************************************************/
--FOR SET VALUES
T_BALANCE   NUMBER(14,4); 
P_BALANCE   NUMBER(14,4); 
T   NUMBER(14,4); 
P   NUMBER(14,4); 

--FOR INSRT 
INS_DW_REV_PRO_ID	NUMBER(38,0);
INS_PAY_TYPE_CODE	VARCHAR2(20 BYTE);
INS_TOTAL_AMOUNT	NUMBER(14,4);
INS_METHODID NUMBER;
INS_GROUP_KEY VARCHAR2(20);
--FORSET COUNT SIZE SELECT DATA
COUNTS   NUMBER;
--/////////////////////////////////PAY TYPE //////////////////////////////////--
CURSOR PT IS 
SELECT 
PAY_TYPE_CODE,TOTAL_AMOUNT_PAID
FROM (
SELECT 
--ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
--ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
MSD.GROUP_KEY AS GROUP_KEY,
TRD.DEDUCTIONTYPE AS PAY_TYPE_CODE,
TRD.AMOUNT AS TOTAL_AMOUNT_PAID
FROM TRSDEDUCTION TRD
LEFT JOIN MASTER_DATA MSD ON TRD.DEDUCTIONTYPE = MSD.KEY
where TRD.PAYMENTID = PARAM_PAYMENT_ID
AND TRD.DEDUCTIONTYPE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID  AND DPT.GROUP_KEY = 'WT_TYPE')
AND ROWNUM = 1
ORDER BY MSD.PROPERTY_2)
WHERE ROWNUM = 1 ;
 
 
--/////////////////////////////////PRODUCT //////////////////////////////////--
CURSOR PD IS
--SELECT 
--DRP.ID AS DW_REVERNUE_PRODUCT_ID,
--DRP.PAYMENT_ID AS PAYMENT_ID,
--DRP.INVOICEID AS INVOICEID,
--DRP.SOURCE_ID AS SOURCE_ID,
--DRP.SOURCE_TABLE AS SOURCE_TABLE,
--DRP.PRODUCT_CODE AS PRODUCT_CODE,
--DRP.SUB_PRODUCT_CODE AS SUB_PRODUCT_CODE,
--DRP.AMOUNT AS AMOUNT,
--DRP.DISCOUNT AS DISCOUNT,
--DRP.VAT AS VAT,
--DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT,
--DRP.DEDUCTION AS DEDUCTION
--FROM DW_REVERNUE_PRODUCT DRP WHERE DRP.PAYMENT_ID = '2936' 
--ORDER BY DRP.PRODUCT_CODE;

SELECT
DW_REVERNUE_PRODUCT_ID,PAYMENT_ID,INVOICEID,
SOURCE_ID,SOURCE_TABLE,PRODUCT_CODE,SUB_PRODUCT_CODE,
AMOUNT,DISCOUNT,VAT,TOTAL_AMOUNT,DEDUCTION
FROM
(SELECT 
DRP.ID AS DW_REVERNUE_PRODUCT_ID,
DRP.PAYMENT_ID AS PAYMENT_ID,
DRP.INVOICEID AS INVOICEID,
DRP.SOURCE_ID AS SOURCE_ID,
DRP.SOURCE_TABLE AS SOURCE_TABLE,
DRP.PRODUCT_CODE AS PRODUCT_CODE,
DRP.SUB_PRODUCT_CODE AS SUB_PRODUCT_CODE,
DRP.AMOUNT AS AMOUNT,
DRP.DISCOUNT AS DISCOUNT,
DRP.VAT AS VAT,
DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT,
DRP.DEDUCTION AS DEDUCTION
FROM DW_REVERNUE_PRODUCT DRP 
INNER join INV_SUMMARY_SAP_IBACSS IB on DRP.SOURCE_ID = IB.id
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID 
AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'WT_TYPE')
ORDER BY IB.SERVICE_PRIORITY_PRODUCT desc)
--DRP.PRODUCT_CODE)
WHERE ROWNUM = 1;

--//////////////////////////////////////SELECT COUNT product//////////////////////////--
CURSOR ROW_NUM IS
SELECT COUNT(ID) FROM
(SELECT 
DRP.ID AS ID,
DRP.AMOUNT AS AMOUNT
FROM DW_REVERNUE_PRODUCT DRP 
INNER join INV_SUMMARY_SAP_IBACSS IB on DRP.SOURCE_ID = IB.id
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID 
AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'WT_TYPE')
ORDER BY IB.SERVICE_PRIORITY_PRODUCT desc)
--DRP.PRODUCT_CODE)
WHERE ROWNUM = 1;

--////////////////////////////BEGIN FOR DEVELOPER ////////////////////////////--

BEGIN

--///////////////////////////SET VALUE = 0 ///////////////////////////////////--
T_BALANCE  := 0;
P_BALANCE  := 0;
T  := 0;
P  := 0;

--/////////////////////SET DATA INTO  P PRODUCT///////////////////////////////--
SELECT DW_REV_PRO_ID,TOTAL_AMOUNT INTO INS_DW_REV_PRO_ID,P FROM
(SELECT 
DRP.ID AS DW_REV_PRO_ID,
DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT
FROM DW_REVERNUE_PRODUCT DRP 
INNER join INV_SUMMARY_SAP_IBACSS IB on DRP.SOURCE_ID = IB.id
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID
--'2936' 
AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'WT_TYPE')
ORDER BY IB.SERVICE_PRIORITY_PRODUCT desc)
--DRP.PRODUCT_CODE)
WHERE ROWNUM = 1;

DBMS_OUTPUT.PUT_LINE('//////////P///////////>' || P);


--////////////////////SET DATA INTO  T PAY_TYPE///////////////////////////////--
--SELECT METHODID,PAY_TYPE_CODE,TOTAL_AMOUNT_PAID INTO INS_METHODID,INS_PAY_TYPE_CODE,T 
--FROM (SELECT 
----ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
----ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
--TRM.METHODID AS METHODID,
--TRM.CODE AS PAY_TYPE_CODE,
--TRM.AMOUNT AS TOTAL_AMOUNT_PAID
--FROM TRSMETHOD TRM 
--LEFT JOIN MASTER_DATA MSD ON TRM.CODE = MSD.KEY
--where TRM.PAYMENTID = PARAM_PAYMENT_ID
----'2936'
--AND TRM.CODE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
--INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
--WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID)
----AND ROWNUM = 1
--ORDER BY MSD.PROPERTY_2)
--WHERE ROWNUM = 1 ;


SELECT 
GROUP_KEY,DEDUCTIONID,PAY_TYPE_CODE,TOTAL_AMOUNT_PAID INTO INS_GROUP_KEY,INS_METHODID,INS_PAY_TYPE_CODE,T 
FROM (
SELECT 
--ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
--ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
MSD.GROUP_KEY AS GROUP_KEY,
TRD.DEDUCTIONID AS DEDUCTIONID,
TRD.DEDUCTIONTYPE AS PAY_TYPE_CODE,
TRD.AMOUNT AS TOTAL_AMOUNT_PAID
FROM TRSDEDUCTION TRD
LEFT JOIN MASTER_DATA MSD ON TRD.DEDUCTIONTYPE = MSD.KEY
where TRD.PAYMENTID = PARAM_PAYMENT_ID
AND TRD.DEDUCTIONTYPE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'WT_TYPE')
AND ROWNUM = 1
ORDER BY MSD.PROPERTY_2)
WHERE ROWNUM = 1 ;

DBMS_OUTPUT.PUT_LINE('//////////T///////////>' || T);

--///////////////////////////////////WHILE LOOP///////////////////////////////--
OPEN ROW_NUM;
FETCH ROW_NUM INTO COUNTS;
WHILE COUNTS <> 0 LOOP

DBMS_OUTPUT.PUT_LINE('////////////////////////////////////DW_PT_IBACSS_WT_DEV  COUNTS ////////////////////////////////////////////>' || COUNTS);

--////////////////////////////////CHECK IF ELSE///////////////////////////////--
IF P  <= T THEN

DBMS_OUTPUT.PUT_LINE('//////////////////////////////////// IF P <= T ////////////////////////////////////////////>');

--///////////////////////////////INSERT IF////////////////////////////////////--
INS_TOTAL_AMOUNT  := P;
INSERT INTO DW_PAY_TYPE("DW_REVERNUE_PRODUCT_ID","METHOD_ID","PAY_TYPE_CODE","TOTAL_AMOUNT","GROUP_KEY")
VALUES (INS_DW_REV_PRO_ID,INS_METHODID,INS_PAY_TYPE_CODE,INS_TOTAL_AMOUNT,INS_GROUP_KEY);
COMMIT;

DBMS_OUTPUT.PUT_LINE('##############INSERT INS_GROUP_KEY##############' || INS_GROUP_KEY);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_METHODID##############' || INS_METHODID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_DW_REV_PRO_ID##############' || INS_DW_REV_PRO_ID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_PAY_TYPE_CODE##############' || INS_PAY_TYPE_CODE);
DBMS_OUTPUT.PUT_LINE('##############INSERT P##############' || P);
--//////////////////////////////END INSERT////////////////////////////////////--

T_BALANCE := T - P;
P_BALANCE := 0;

--////////////////////////////////NEXT P /////////////////////////////////////--

--/////////////////////SET DATA INTO  P PRODUCT///////////////////////////////--
            SELECT DW_REV_PRO_ID,TOTAL_AMOUNT INTO INS_DW_REV_PRO_ID,P FROM
            (SELECT 
            DRP.ID AS DW_REV_PRO_ID,
            DRP.TOTAL_AMOUNT  AS TOTAL_AMOUNT
            FROM DW_REVERNUE_PRODUCT DRP 
            INNER join INV_SUMMARY_SAP_IBACSS IB on DRP.SOURCE_ID = IB.id
            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID
--            '2936' 
            AND DRP.ID NOT IN (SELECT DPT.DW_REVERNUE_PRODUCT_ID FROM DW_PAY_TYPE DPT
            INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'WT_TYPE')
            ORDER BY IB.SERVICE_PRIORITY_PRODUCT desc)
            --DRP.PRODUCT_CODE)
            WHERE ROWNUM = 1;
            
            DBMS_OUTPUT.PUT_LINE('//////////NEXT IF P///////////>' || P);

p := p + p_balance;
t := t_balance;


--COUNTS := 0;

ELSE

DBMS_OUTPUT.PUT_LINE('//////////////////////////////////// ELSE P > T ////////////////////////////////////////////>');

--///////////////////////////////INSERT ELSE//////////////////////////////////--
INS_TOTAL_AMOUNT  := T;
INSERT INTO DW_PAY_TYPE("DW_REVERNUE_PRODUCT_ID","METHOD_ID","PAY_TYPE_CODE","TOTAL_AMOUNT","GROUP_KEY")
VALUES (INS_DW_REV_PRO_ID,INS_METHODID,INS_PAY_TYPE_CODE,INS_TOTAL_AMOUNT,INS_GROUP_KEY);
COMMIT;

DBMS_OUTPUT.PUT_LINE('##############INSERT INS_GROUP_KEY##############' || INS_GROUP_KEY);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_METHODID##############' || INS_METHODID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_DW_REV_PRO_ID##############' || INS_DW_REV_PRO_ID);
DBMS_OUTPUT.PUT_LINE('##############INSERT INS_PAY_TYPE_CODE##############' || INS_PAY_TYPE_CODE);
DBMS_OUTPUT.PUT_LINE('##############INSERT P##############' || T);
--//////////////////////////////END INSERT ELSE///////////////////////////////--

T_BALANCE := 0;
P_BALANCE := P - T;

--////////////////////////////////NEXT T /////////////////////////////////////--
--////////////////////SET DATA INTO  T PAY_TYPE///////////////////////////////--
--            SELECT METHODID,PAY_TYPE_CODE,TOTAL_AMOUNT_PAID INTO INS_METHODID,INS_PAY_TYPE_CODE,T 
--            FROM (SELECT 
--            --ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
--            --ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
--            TRM.METHODID AS METHODID,
--            TRM.CODE AS PAY_TYPE_CODE,
--            TRM.AMOUNT AS TOTAL_AMOUNT_PAID
--            FROM TRSMETHOD TRM 
--            LEFT JOIN MASTER_DATA MSD ON TRM.CODE = MSD.KEY
--            where TRM.PAYMENTID = PARAM_PAYMENT_ID
----            '2936'
--            AND TRM.CODE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
--            INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
--            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID)
--            --AND ROWNUM = 1
--            ORDER BY MSD.PROPERTY_2)
--            WHERE ROWNUM = 1 ;



            SELECT 
            GROUP_KEY,DEDUCTIONID,PAY_TYPE_CODE,TOTAL_AMOUNT_PAID INTO INS_GROUP_KEY,INS_METHODID,INS_PAY_TYPE_CODE,T 
            FROM (
            SELECT 
            --ROUND((TRM.AMOUNT * 7) / 107 ,2) AS VAT_PAID,
            --ROUND(TRM.AMOUNT - ((TRM.AMOUNT * 7) / 107 ),2) AS AMOUNT_PAID,
            MSD.GROUP_KEY AS GROUP_KEY,
            TRD.DEDUCTIONID AS DEDUCTIONID,
            TRD.DEDUCTIONTYPE AS PAY_TYPE_CODE,
            TRD.AMOUNT AS TOTAL_AMOUNT_PAID
            FROM TRSDEDUCTION TRD
            LEFT JOIN MASTER_DATA MSD ON TRD.DEDUCTIONTYPE = MSD.KEY
            where TRD.PAYMENTID = PARAM_PAYMENT_ID
            AND TRD.DEDUCTIONTYPE NOT IN (SELECT DPT.PAY_TYPE_CODE FROM DW_PAY_TYPE DPT
            INNER JOIN DW_REVERNUE_PRODUCT DRP ON DPT.DW_REVERNUE_PRODUCT_ID = DRP.ID
            WHERE DRP.PAYMENT_ID = PARAM_PAYMENT_ID AND DPT.GROUP_KEY = 'WT_TYPE')
            AND ROWNUM = 1
            ORDER BY MSD.PROPERTY_2)
            WHERE ROWNUM = 1 ;


            
            DBMS_OUTPUT.PUT_LINE('//////////NEXT ELSE T///////////>' || T);
            
            
T := T + T_BALANCE;
P := P_BALANCE;	


END IF;
--//////////////////////////////END CHECK IF ELSE/////////////////////////////--

--DBMS_OUTPUT.PUT_LINE('///////' || COUNTS);
--COUNTS := 0;

END LOOP;
CLOSE ROW_NUM;
--////////////////////////////////END WHILE LOOP//////////////////////////////--


END DW_PT_IBACSS_WT_DEV;

/*##########################################################################################################################################
#                                                          			VIEW                                                   				   #
############################################################################################################################################*/

/*##########################################################################################################################################
#                                                          VIEW   V_AR_ALL_SOURCE                                                          #
############################################################################################################################################*/

CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."V_AR_ALL_SOURCE" ("SOURCE_TABLE", "ID", "BILL_GROUP", "CUSTOMER_GROUP", "SEGMENT_CODE", "REVENUE_TYPE_CODE", "SERVICE_PRIORITY_PRODUCT", "SERVICE_CODE", "CCTR_SAP", "CURR", "TRADING_PART", "ACCOUNT_CODE_OLD", "ACCOUNT_CODE_NEW", "GL_ACCOUNT", "PRODUCT_NAME", "SUB_PRODUCT_NAME", "REV_TYPE_NAME", "REGION", "TOTAL_AMOUNT") AS 
  SELECT 
'IBACSS' as SOURCE_TABLE, 
IBA.ID,
IBA.BILLGROUP AS  BILL_GROUP, 
IBA.CUSTOMER_GROUP AS CUSTOMER_GROUP,  
IBA.SEGMENT_CODE AS SEGMENT_CODE,  
IBA.REVENUE_TYPE_CODE AS REVENUE_TYPE_CODE,  
IBA.SERVICE_PRIORITY_PRODUCT AS SERVICE_PRIORITY_PRODUCT, 
IBA.SERVICE_CODE AS SERVICE_CODE,
IBA.CCTR_SAP AS  CCTR_SAP  , 
IBA.CURR   AS CURR,
IBA.TRADING_PART  AS TRADING_PART, 
IBA.ACCOUNT_CODE_OLD AS ACCOUNT_CODE_OLD,
IBA.ACCOUNT_CODE_NEW AS ACCOUNT_CODE_NEW,
IBA.GL_ACCOUNT AS GL_ACCOUNT,
IBA.PRODUCT_NAME AS PRODUCT_NAME,
IBA.SUB_PRODUCT_NAME AS SUB_PRODUCT_NAME,
IBA.REV_TYPE_NAME AS REV_TYPE_NAME,
IBA.REGION,
IBA.TOTAL_AMOUNT
FROM   INV_SUMMARY_SAP_IBACSS IBA

 UNION ALL

select 
source as SERVICE_SOURCE 
,ISC.ID
,ISC.BILLGROUP
,ISC.CUSTOMER_GROUP
,ISC.SEGMENT_CODE
,ISC.REVENUE_TYPE_CODE
,ISC.SERVICE_PRIORITY_PRODUCT
,ISC.SERVICE_CODE
,ISC.CCTR_SAP
,ISC.CURRANCY_AR
,ISC.TRADING_PART
,ISC.ACCOUNT_CODE_OLD
,ISC.ACCOUNT_CODE_NEW AS ACCOUNT_CODE_NEW
--,ISC.ACCOUNT_NO
,ISC.GL_ACCOUNT
,ISC.PRODUCT_NAME
,ISC.SUB_PRODUCT_NAME
,ISC.REV_TYPE_NAME
,ISC.REGION
,ISC.TOTAL_AMOUNT_AR
from inv_source ISC;

/*##########################################################################################################################################
#                                                          VIEW   DW_EPIS                                                   #
############################################################################################################################################*/

CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_EPIS" ("CONTRNO", "AR_REF", "SUBSCR_NO", "BILL_GROUP", "CUSTOMER_GROUP", "RECEIPTNO", "SEQ", "RECEIPT_RECEIPTTYPE", "RECEIPT_STATUS", "SEGMENT_CODE", "PRO_PRODUCT_CODE", "PRO_SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "QUANTITY", "DISCOUNT_BF_VAT", "SPECIAL_DISCOUNT", "INV_AMT_BEFORE_VAT", "INV_VAT", "DEDUCTION_TYPE", "PAY_TOTALAMOUNT", "DISCOUNT_AFSALE", "PAYTYPE", "USER_NAME", "INV_DATE", "INV_DATE_DT", "DUE_DATE", "DUE_DATE_DT", "PAY_DATE", "PAY_DATE_DT", "UPDATE_DATE", "UPDATE_DATE_DT", "REVERSE_DATE", "REVERSE_DATE_DT", "CANCELREASON", "USER_APPROVE_BY", "INV_PERIOD", "REMARK", "SERVICE_PRIORITY_PRODUCT", "CAT_SERVICE", "SERVICE_CODE", "POST_DATE", "POST_DATE_DT", "CCTR_SAP", "CURR", "TAX_CODE", "BUSINESS_AREA", "LOCATION_NAME", "BUSINESS_PLACE", "TRADING_PART", "SHOP_CLOSING_ID", "SHOP_CLOSING_DATE", "SHOP_CLOSING_DATE_DT", "COLLECTION_CODE", "COLLECTION_UNIT", "REGION", "REGION_SAP", "ACCOUNT_CODE_OLD", "ACCOUNT_CODE_NEW", "GL_ACCOUNT", "PRODUCT_NAME", "SUB_PRODUCT_NAME", "REV_TYPE_NAME", "STATUS_FLAG", "REMARK_RECEIPT", "PAY_LOCATION", "PAYMENTID", "SERVICE_SOURCE") AS 
  SELECT 
--*
COR.ACCOUNTNO	AS	CONTRNO	,
TIV.INVOICENO	    AS	AR_REF,
COR.ACCOUNTSUBNO  AS SUBSCR_NO,
AR.BILL_GROUP AS  BILL_GROUP, 
AR.CUSTOMER_GROUP AS CUSTOMER_GROUP,  
COR.RECEIPTNO	AS	RECEIPTNO	,
'' AS SEQ,
COR.RECEIPTTYPE	AS	RECEIPT_RECEIPTTYPE	,
COR.ATTRIBUTES as RECEIPT_STATUS,
AR.SEGMENT_CODE AS SEGMENT_CODE,    
DWP.product_code AS PRO_PRODUCT_CODE,
DWP.SUB_PRODUCT_CODE AS PRO_SUB_PRODUCT_CODE,
AR.REVENUE_TYPE_CODE AS REVENUE_TYPE_CODE,  
'' AS QUANTITY,
TIV.DISCOUNT	AS	DISCOUNT_BF_VAT ,
'' as SPECIAL_DISCOUNT,
------------------------------------------------------------------------
CASE NVL(MTD.GROUP_KEY,NVL(DPT.PAY_TYPE_CODE,' '))   --- PAYTYPE
WHEN 'WT_TYPE'  THEN 0
ELSE ROUND(NVL(DPT.total_amount,0) *100/((SELECT VALUE FROM MASTER_DATA WHERE GROUP_KEY = 'VAT' ) + 100),2)	 END   AS	 INV_AMT_BEFORE_VAT     ,
-
--ROUND(NVL(DPT.total_amount,0) *100/((SELECT VALUE FROM MASTER_DATA WHERE GROUP_KEY = 'VAT' ) + 100),2)	AS INV_AMT_BEFORE_VAT,---------------------------------
--TIV.VAT	AS	INV_VAT,
-----------------------------------------------------------------------------
CASE NVL(MTD.GROUP_KEY,NVL(DPT.PAY_TYPE_CODE,' '))   --- PAYTYPE
WHEN 'WT_TYPE'  THEN 0
--ELSE  (  DPT.total_amount - (ROUND(NVL(DPT.total_amount,0) * 100/((SELECT VALUE FROM MASTER_DATA WHERE GROUP_KEY = 'VAT' ) + 100),2)	)   )  END AS 	INV_VAT,
ELSE   ROUND(NVL(DPT.total_amount,0) - (NVL(DPT.total_amount,0) * 100/((SELECT VALUE FROM MASTER_DATA WHERE GROUP_KEY = 'VAT' ) + 100)  ) ,2) * (-1)   END AS 	INV_VAT,

-----------------------------------------------------------------------------
DPT.PAY_TYPE_CODE  AS DEDUCTION_TYPE,

--CASE NVL(MTD.GROUP_KEY,NVL(DPT.PAY_TYPE_CODE,' '))   --- PAYTYPE
--WHEN 'WT_TYPE'  THEN 0
--ELSE NVL(DPT.total_amount,0) END   AS	 PAY_TOTALAMOUNT     ,
DPT.total_amount AS	 PAY_TOTALAMOUNT     ,
CPM.AFTERSALEDISCOUNT	AS	DISCOUNT_AFSALE,
--NVL(DPT.total_amount,0) - NVL(AR.TOTAL_AMOUNT,0)  AS BALANCE_DUE,---######################

NVL(MTD.PROPERTY_1,NVL(DPT.PAY_TYPE_CODE,' ')) AS PAYTYPE,
CPM.UPDATEUSER as USER_NAME,
TO_DATE(TIV.ISSUEDATE)	AS	INV_DATE,
TIV.ISSUEDATE	AS	INV_DATE_DT,
TO_DATE(TIV.DUEDATE) AS	DUE_DATE,
TIV.DUEDATE AS	DUE_DATE_DT,
To_char(COR.RECEIPTDTTM,'dd-mon-yy')	AS	PAY_DATE	,
COR.RECEIPTDTTM	AS	PAY_DATE_DT	,
To_char(COR.UPDATEDTTM,'dd-mon-yy') as UPDATE_DATE ,
COR.UPDATEDTTM as UPDATE_DATE_DT ,
To_char(COR.CANCELDTTM,'dd-mon-yy') as REVERSE_DATE,
COR.CANCELDTTM as REVERSE_DATE_DT,
COR.CANCELREASON AS CANCELREASON,
COR.CANCELEDBY AS USER_APPROVE_BY,
TIV.BILLCYCLE AS INV_PERIOD,
substr(COR.REMARK,0,19) AS  REMARK , ---??????? 20 ???
AR.SERVICE_PRIORITY_PRODUCT AS SERVICE_PRIORITY_PRODUCT, 
--'IBACSS' AS  BILL_TYPE ,
COR.BILLING_SERVICE_NAME AS CAT_SERVICE,
AR.SERVICE_CODE AS SERVICE_CODE,
To_char(COR.UPDATEDTTM,'dd-mon-yy') AS POST_DATE,
COR.UPDATEDTTM AS POST_DATE_DT,
AR.CCTR_SAP AS  CCTR_SAP  , 
AR.CURR   AS CURR,
CPM.VATRATE AS TAX_CODE,
substr(COR.BRANCHAREA,1,5) AS BUSINESS_AREA, 
COR.BRANCHNAME AS LOCATION_NAME ,
substr(COR.BRANCHCODE,2,5) AS BUSINESS_PLACE,
AR.TRADING_PART  AS TRADING_PART, 
COR.SHOP_CLOSING_ID AS SHOP_CLOSING_ID,
To_char(SHC.CLOSING_DATE,'dd-mon-yy') AS SHOP_CLOSING_DATE, ----------------------------
SHC.CLOSING_DATE AS SHOP_CLOSING_DATE_DT, 
s2.TB_REGION_CODE  AS COLLECTION_CODE,
s2.COST_CENTER_CODE AS COLLECTION_UNIT ,      
s1.TB_REGION_CODE AS REGION,
s1.COST_CENTER_CODE  AS REGION_SAP,
AR.ACCOUNT_CODE_OLD AS ACCOUNT_CODE_OLD,
AR.ACCOUNT_CODE_NEW AS ACCOUNT_CODE_NEW,
AR.GL_ACCOUNT AS GL_ACCOUNT,
AR.PRODUCT_NAME AS PRODUCT_NAME,
AR.SUB_PRODUCT_NAME AS SUB_PRODUCT_NAME,
AR.REV_TYPE_NAME AS REV_TYPE_NAME,
TPR.TRACKINGID AS STATUS_FLAG,
COR.REMARK AS REMARK_RECEIPT,
 SHOP.BUAREA AS  PAY_LOCATION ,    
 TIV.PAYMENTID,
AR.SOURCE_TABLE as SERVICE_SOURCE ---TIV.SOURCE	AS	SERVICE_SOURCE


FROM  TMPINVOICE TIV
INNER JOIN CORPAYMENT CPM ON TIV.PAYMENTID = CPM.PAYMENTID
LEFT JOIN DW_REVERNUE_PRODUCT DWP ON TIV.PAYMENTID = DWP.PAYMENT_ID
LEFT JOIN DW_PAY_TYPE DPT ON DWP.ID = DPT.DW_REVERNUE_PRODUCT_ID
LEFT JOIN MASTER_DATA MTD ON DPT.PAY_TYPE_CODE =  MTD.KEY AND MTD.GROUP_KEY = 'WT_TYPE' --------##################################
LEFT JOIN CORRECEIPT COR ON TIV.RECEIPTID = COR.RECEIPTID
LEFT JOIN MASPOS POS ON CPM.POSID = POS.POSID
LEFT JOIN MASSHOP SHOP ON POS.SHOPID = SHOP.SHOPID
LEFT JOIN SHOP_CLOSING SHC ON COR.SHOP_CLOSING_ID = SHC.SHOP_CLOSING_ID 
--LEFT JOIN INV_SUMMARY_SAP_IBACSS IBA ON  DWP.source_id = AR.ID
LEFT JOIN V_AR_ALL_SOURCE AR ON  DWP.source_id = AR.ID AND  DWP.SOURCE_TABLE = AR.SOURCE_TABLE

LEFT JOIN TRSPAYMENTREF TPR ON CPM.PAYMENTID = TPR.PAYMENTID and DPT.PAY_TYPE_CODE = TPR.PAY_TYPE_CODE
LEFT JOIN SAP_REVENUE_DEPT@CATPCU1_DEV s1 on SUBSTR(AR.REGION,1,1)||'000' = s1.TB_REGION_CODE
LEFT JOIN  SAP_REVENUE_DEPT@CATPCU1_DEV s2 on AR.REGION = s2.TB_REGION_CODE

where DPT.total_amount IS NOT NULL   --#########################
--AND TIV.PAYMENTID = 3657
--COR.CANCELDTTM IS NOT NULL
--where DPT.PAY_TYPE_CODE  is not null
;

/*##########################################################################################################################################
#                                                          VIEW   DW_BILL_PAYMENT_IBACSS                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_BILL_PAYMENT_IBACSS" ("BILLING_ACC_ID", "INVOICE_NO", "CUSTOMER_GROUP", "BILLGROUP", "SEGMENT_CODE", "PRODUCT_CODE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "INVDATE", "DUEDATE", "PAYMENT_LOCATION_CODE", "PAY_TYPE_CODE", "PAYMENT_DATETIME", "PERIOD", "PAY_AMOUNT", "VAT_AMOUNT", "TOTAL_AMOUNT", "COLLECTION_CODE", "REGION_SAP", "STATUS_FLAG", "ACCOUNT_CODE_NEW", "JOBDATE") AS 
  select 
dw.CONTRNO AS BILLING_ACC_ID,
dw.AR_REF AS INVOICE_NO,
dw.CUSTOMER_GROUP,
dw.BILL_GROUP AS BILLGROUP,
dw.SEGMENT_CODE,
dw.PRO_PRODUCT_CODE as   PRODUCT_CODE ,
dw.PRO_SUB_PRODUCT_CODE AS   SUB_PRODUCT_CODE ,
dw.REVENUE_TYPE_CODE,
TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd') as INVDATE,
TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd') as DUEDATE,
dw.PAY_LOCATION AS PAYMENT_LOCATION_CODE,
dw.PAYTYPE as PAY_TYPE_CODE,
TO_CHAR(dw.pay_date_dt, 'yyyymmdd') AS  PAYMENT_DATETIME,
--INV_PERIOD AS PERIOD,
substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,16)  AS PERIOD,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as VAT_AMOUNT  ,
dw.PAY_TOTALAMOUNT AS TOTAL_AMOUNT,
dw.COLLECTION_CODE,
dw.REGION_SAP as REGION_SAP,
'Y' AS STATUS_FLAG,
DW.ACCOUNT_CODE_NEW,
--reverse_date,
TO_CHAR(SYSDATE, 'yyyymmdd') AS  JOBDATE



--CASE dw.paytype
--WHEN 'WT'  THEN dw.pay_totalamount
--ELSE 0 END   AS	   PAY_WT     ,
--
--dw.GL_ACCOUNT,
--dw.TRADING_PART,
--dw.BUSINESS_AREA,
--dw.BUSINESS_PLACE,
--
--TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
--
--dw.LOCATION_NAME,
--dw.BILL_GROUP,
--TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd')  as post_date,
--dw.CCTR_SAP AS CCTR,
--
--'' AS REF,
--'' AS TYPE,
--
--
--dw.CUSTOMER_GROUP,
--dw.CAT_SERVICE,
--SUBSTR(DW.INV_PERIOD,0,5) AS PERIOD




--'EPI' AS  CHANNEL ,
--dw.RECEIPTNO AS RECEIPT_NO,
--dw.SERVICE_PRIORITY_PRODUCT,
--'' AS region_dw,
--
--
--'' as default_prod,
--
--CASE dw.AR_REF 
--WHEN 'Advance Payment' THEN  ' '
--ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
--END AS  USAGE_PERIOD ,
--
--dw.COLLECTION_UNIT,


from DW_EPIS dw
where dw.SERVICE_SOURCE = 'IBACSS'
and reverse_date is null
--and reverse_date is not null
;


/*##########################################################################################################################################
#                                                          VIEW   DW_BILL_PAYMENT_OTBOSS                                                   #
############################################################################################################################################*/

CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_BILL_PAYMENT_OTBOSS" ("BILLING_ACC_ID", "INVOICE_NO", "CUSTOMER_GROUP", "BILLGROUP", "SEGMENT_CODE", "PRODUCT_CODE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "INVDATE", "DUEDATE", "PAYMENT_LOCATION_CODE", "PAY_TYPE_CODE", "PAYMENT_DATETIME", "PERIOD", "PAY_AMOUNT", "VAT_AMOUNT", "TOTAL_AMOUNT", "COLLECTION_CODE", "REGION_SAP", "STATUS_FLAG", "ACCOUNT_CODE_NEW", "JOBDATE") AS 
  select 
dw.CONTRNO AS BILLING_ACC_ID,
dw.AR_REF AS INVOICE_NO,
dw.CUSTOMER_GROUP,
dw.BILL_GROUP AS BILLGROUP,
dw.SEGMENT_CODE,
dw.PRO_PRODUCT_CODE as   PRODUCT_CODE ,
dw.PRO_SUB_PRODUCT_CODE AS   SUB_PRODUCT_CODE ,
dw.REVENUE_TYPE_CODE,
TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd') as INVDATE,
TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd') as DUEDATE,
dw.PAY_LOCATION AS PAYMENT_LOCATION_CODE,
dw.PAYTYPE as PAY_TYPE_CODE,
TO_CHAR(dw.pay_date_dt, 'yyyymmdd') AS  PAYMENT_DATETIME,
INV_PERIOD AS PERIOD,
--substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,16)  AS PERIOD,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as VAT_AMOUNT  ,
dw.PAY_TOTALAMOUNT AS TOTAL_AMOUNT,
dw.COLLECTION_CODE,
dw.REGION_SAP as REGION_SAP,
'Y' AS STATUS_FLAG,
DW.ACCOUNT_CODE_NEW,
TO_CHAR(SYSDATE, 'yyyymmdd') AS  JOBDATE



--CASE dw.paytype
--WHEN 'WT'  THEN dw.pay_totalamount
--ELSE 0 END   AS	   PAY_WT     ,
--
--dw.GL_ACCOUNT,
--dw.TRADING_PART,
--dw.BUSINESS_AREA,
--dw.BUSINESS_PLACE,
--
--TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
--
--dw.LOCATION_NAME,
--dw.BILL_GROUP,
--TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd')  as post_date,
--dw.CCTR_SAP AS CCTR,
--
--'' AS REF,
--'' AS TYPE,
--
--
--dw.CUSTOMER_GROUP,
--dw.CAT_SERVICE,
--SUBSTR(DW.INV_PERIOD,0,5) AS PERIOD




--'EPI' AS  CHANNEL ,
--dw.RECEIPTNO AS RECEIPT_NO,
--dw.SERVICE_PRIORITY_PRODUCT,
--'' AS region_dw,
--
--
--'' as default_prod,
--
--CASE dw.AR_REF 
--WHEN 'Advance Payment' THEN  ' '
--ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
--END AS  USAGE_PERIOD ,
--
--dw.COLLECTION_UNIT,


from DW_EPIS dw
where dw.SERVICE_SOURCE = 'OTBOSS'
and reverse_date is null;

/*##########################################################################################################################################
#                                                          VIEW   DW_REVERSE_IBACSS                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_REVERSE_IBACSS" ("BILLING_ACC_ID", "INVOICE_NO", "CUSTOMER_GROUP", "BILLGROUP", "SEGMENT_CODE", "PRODUCT_CODE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "INVDATE", "DUEDATE", "PAYMENT_LOCATION_CODE", "PAY_TYPE_CODE", "PAYMENT_DATETIME", "PERIOD", "PAY_AMOUNT", "VAT_AMOUNT", "TOTAL_AMOUNT", "COLLECTION_CODE", "REGION_SAP", "STATUS_FLAG", "ACCOUNT_CODE_NEW", "JOBDATE", "REVERSE_DATE") AS 
  select 
dw.CONTRNO AS BILLING_ACC_ID,
dw.AR_REF AS INVOICE_NO,
dw.CUSTOMER_GROUP,
dw.BILL_GROUP AS BILLGROUP,
dw.SEGMENT_CODE,
dw.PRO_PRODUCT_CODE as   PRODUCT_CODE ,
dw.PRO_SUB_PRODUCT_CODE AS   SUB_PRODUCT_CODE ,
dw.REVENUE_TYPE_CODE,
TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd') as INVDATE,
TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd') as DUEDATE,
dw.PAY_LOCATION AS PAYMENT_LOCATION_CODE,
dw.PAYTYPE as PAY_TYPE_CODE,
TO_CHAR(dw.pay_date_dt, 'yyyymmdd') AS  PAYMENT_DATETIME,
--INV_PERIOD AS PERIOD,
substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,16)  AS PERIOD,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as VAT_AMOUNT  ,
dw.PAY_TOTALAMOUNT AS TOTAL_AMOUNT,
dw.COLLECTION_CODE,
dw.REGION_SAP as REGION_SAP,
'Y' AS STATUS_FLAG,
DW.ACCOUNT_CODE_NEW,
--reverse_date,
TO_CHAR(SYSDATE, 'yyyymmdd') AS  JOBDATE,
NVL(TO_CHAR(dw.REVERSE_DATE_DT,'yyyymmdd'), ' ') as REVERSE_DATE



--CASE dw.paytype
--WHEN 'WT'  THEN dw.pay_totalamount
--ELSE 0 END   AS	   PAY_WT     ,
--
--dw.GL_ACCOUNT,
--dw.TRADING_PART,
--dw.BUSINESS_AREA,
--dw.BUSINESS_PLACE,
--
--TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
--
--dw.LOCATION_NAME,
--dw.BILL_GROUP,
--TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd')  as post_date,
--dw.CCTR_SAP AS CCTR,
--
--'' AS REF,
--'' AS TYPE,
--
--
--dw.CUSTOMER_GROUP,
--dw.CAT_SERVICE,
--SUBSTR(DW.INV_PERIOD,0,5) AS PERIOD




--'EPI' AS  CHANNEL ,
--dw.RECEIPTNO AS RECEIPT_NO,
--dw.SERVICE_PRIORITY_PRODUCT,
--'' AS region_dw,
--
--
--'' as default_prod,
--
--CASE dw.AR_REF 
--WHEN 'Advance Payment' THEN  ' '
--ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
--END AS  USAGE_PERIOD ,
--
--dw.COLLECTION_UNIT,


from DW_EPIS dw
where dw.SERVICE_SOURCE = 'IBACSS'
--and reverse_date is not null
and UPDATE_DATE < reverse_date;


/*##########################################################################################################################################
#                                                          VIEW   DW_REVERSE_OTBOSS                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_REVERSE_OTBOSS" ("BILLING_ACC_ID", "INVOICE_NO", "CUSTOMER_GROUP", "BILLGROUP", "SEGMENT_CODE", "PRODUCT_CODE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "INVDATE", "DUEDATE", "PAYMENT_LOCATION_CODE", "PAY_TYPE_CODE", "PAYMENT_DATETIME", "PERIOD", "PAY_AMOUNT", "VAT_AMOUNT", "TOTAL_AMOUNT", "COLLECTION_CODE", "REGION_SAP", "STATUS_FLAG", "ACCOUNT_CODE_NEW", "JOBDATE", "REVERSE_DATE") AS 
  select 
dw.CONTRNO AS BILLING_ACC_ID,
dw.AR_REF AS INVOICE_NO,
dw.CUSTOMER_GROUP,
dw.BILL_GROUP AS BILLGROUP,
dw.SEGMENT_CODE,
dw.PRO_PRODUCT_CODE as   PRODUCT_CODE ,
dw.PRO_SUB_PRODUCT_CODE AS   SUB_PRODUCT_CODE ,
dw.REVENUE_TYPE_CODE,
TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd') as INVDATE,
TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd') as DUEDATE,
dw.PAY_LOCATION AS PAYMENT_LOCATION_CODE,
dw.PAYTYPE as PAY_TYPE_CODE,
TO_CHAR(dw.pay_date_dt, 'yyyymmdd') AS  PAYMENT_DATETIME,
INV_PERIOD AS PERIOD,
--substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,16)  AS PERIOD,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as VAT_AMOUNT  ,
dw.PAY_TOTALAMOUNT AS TOTAL_AMOUNT,
dw.COLLECTION_CODE,
dw.REGION_SAP as REGION_SAP,
'Y' AS STATUS_FLAG,
DW.ACCOUNT_CODE_NEW,
--reverse_date,
TO_CHAR(SYSDATE, 'yyyymmdd') AS  JOBDATE,
NVL(TO_CHAR(dw.REVERSE_DATE_DT,'yyyymmdd'), ' ') as REVERSE_DATE



--CASE dw.paytype
--WHEN 'WT'  THEN dw.pay_totalamount
--ELSE 0 END   AS	   PAY_WT     ,
--
--dw.GL_ACCOUNT,
--dw.TRADING_PART,
--dw.BUSINESS_AREA,
--dw.BUSINESS_PLACE,
--
--TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
--
--dw.LOCATION_NAME,
--dw.BILL_GROUP,
--TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd')  as post_date,
--dw.CCTR_SAP AS CCTR,
--
--'' AS REF,
--'' AS TYPE,
--
--
--dw.CUSTOMER_GROUP,
--dw.CAT_SERVICE,
--SUBSTR(DW.INV_PERIOD,0,5) AS PERIOD




--'EPI' AS  CHANNEL ,
--dw.RECEIPTNO AS RECEIPT_NO,
--dw.SERVICE_PRIORITY_PRODUCT,
--'' AS region_dw,
--
--
--'' as default_prod,
--
--CASE dw.AR_REF 
--WHEN 'Advance Payment' THEN  ' '
--ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
--END AS  USAGE_PERIOD ,
--
--dw.COLLECTION_UNIT,


from DW_EPIS dw
where dw.SERVICE_SOURCE = 'OTBOSS'
--and reverse_date is not null
and UPDATE_DATE < reverse_date;

/*##########################################################################################################################################
#                                                          VIEW   DW_WEBBASE_RECEIPT                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_WEBBASE_RECEIPT" ("RECEIPT_NO", "LOCATION_CODE", "SERVICE_CODE", "PAY_DATE", "LOG_DATE", "USER_NAME", "AMT_BEFORE_VAT", "VAT_AMOUNT", "NET_AMOUNT", "RECEIPT_TYPE", "RECEIPT_STATUS", "BP", "BA", "POSTING_DATE", "CCTR") AS 
  SELECT A.RECEIPT_NO,A.LOCATION_CODE , a.SERVICECODE as SERVICE_CODE,A.PAY_DATE,A.LOG_DATE ,A.USER_NAME,SUM(A.AMOUNT) as AMT_BEFORE_VAT,SUM(A.VAT) as VAT_AMOUNT,SUM(A.TOTALCHARGE) as NET_AMOUNT,
a.RECEIPT_TYPE,a.RECEIPT_STATUS,A.BP,A.BA,a.POSTING_DATE,A.CCTR
FROM
( SELECT CR.RECEIPTNO AS   RECEIPT_NO, CR.BRANCHAREA AS LOCATION_CODE
, TS.SERVICECODE--service_code 424001731031,219022020011,619999001031
,TO_CHAR(CR.RECEIPTDTTM, 'YYYYMMDD') AS PAY_DATE,TO_CHAR(CR.UPDATEDTTM, 'YYYYMMDD') AS LOG_DATE 
, CR.UPDATEUSER AS USER_NAME,  TS.CHARGE as AMOUNT , TS.VAT ,TS.TOTALCHARGE
, CASE WHEN  CR.RECEIPTTYPE IN ('FULL') THEN 'F' --full
       WHEN  CR.RECEIPTTYPE IN ('ABVR') THEN 'S'  END AS RECEIPT_TYPE
, CASE WHEN  CR.ATTRIBUTES LIKE '%R%' AND TRUNC(CR.UPDATEDTTM) != TRUNC(CR.CANCELDTTM)  THEN 'C' --cancle
       WHEN  CR.ATTRIBUTES NOT LIKE '%R%' THEN 'N'  END AS RECEIPT_STATUS --normal
,CR.BRANCHAREA AS BP,SUBSTR(CR.BRANCHCODE,2,5) AS BA,TO_CHAR(CR.UPDATEDTTM, 'YYYYMMDD') AS POSTING_DATE ,TS.PROFIT_CENTER_CODE AS CCTR
FROM CORRECEIPT CR
INNER JOIN CORPAYMENT CP ON CP.PAYMENTID = CR.PAYMENTID AND CP.PAYMENTTYPE IN ('OTHER','TOPUP')
LEFT JOIN TMPINVOICESERVICE TS ON CR.RECEIPTID = TS.RECEIPTID AND CP.PAYMENTID = TS.PAYMENTID 
LEFT JOIN TMPINVOICE TI ON CP.PAYMENTID = TI.PAYMENTID 
WHERE TO_CHAR(CR.UPDATEDTTM,'YYYY-MM') = TO_CHAR(TRUNC(SYSDATE),'YYYY-MM')
AND CR.ATTRIBUTES NOT LIKE '%R%'  ) A
GROUP BY A.RECEIPT_NO ,A.LOCATION_CODE, a.SERVICECODE,A.PAY_DATE,A.LOG_DATE,A.USER_NAME,a.RECEIPT_TYPE,a.RECEIPT_STATUS,A.BP,A.BA,a.POSTING_DATE,A.CCTR
ORDER BY A.RECEIPT_NO;


/*##########################################################################################################################################
#                                                          VIEW   DW_WEBBASE_RECEIPT_DETAIL                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."DW_WEBBASE_RECEIPT_DETAIL" ("RECEIPT_NO", "SEQ", "MATERIAL_CODE", "MATERIAL_NAME", "SEGMENT_CODE", "PRODUCT_CODE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "QUANTITY", "COST", "DISCOUNT", "AMT_BEFORE_VAT", "VAT_AMOUNT", "NET_AMOUNT", "PAY_DATE") AS 
  SELECT
 CR.RECEIPTNO AS RECEIPT_NO , ROW_NUMBER() OVER (PARTITION BY  CR.RECEIPTNO ORDER BY TS.SERVICEID) AS SEQ
,NULL AS MATERIAL_CODE,NULL AS MATERIAL_NAME,TS.SEGMENT_CODE,TS.PRODUCTCODE as PRODUCT_CODE,TS.PRODUCTSUBNO AS SUB_PRODUCT_CODE
,TS.REVENUE_TYPE_CODE,TS.SERVICE_QTY AS QUANTITY,TS.COST_PER_UNIT AS COST,CR.DISCOUNT
, TS.CHARGE AS AMT_BEFORE_VAT, TS.VAT AS VAT_AMOUNT,TS.TOTALCHARGE AS NET_AMOUNT,TO_CHAR(CR.RECEIPTDTTM, 'YYYYMMDD') AS PAY_DATE
FROM CORRECEIPT CR
INNER JOIN CORPAYMENT CP ON CP.PAYMENTID = CR.PAYMENTID AND CP.PAYMENTTYPE IN ('OTHER','TOPUP')
LEFT JOIN TMPINVOICESERVICE TS ON CR.RECEIPTID = TS.RECEIPTID AND CP.PAYMENTID = TS.PAYMENTID 
LEFT JOIN TMPINVOICE TI ON CP.PAYMENTID = TI.PAYMENTID 
WHERE TO_CHAR(CR.UPDATEDTTM,'YYYY-MM') = TO_CHAR(TRUNC(SYSDATE),'YYYY-MM')
AND CR.ATTRIBUTES NOT LIKE '%R%' 
ORDER BY CR.RECEIPTNO;

/*##########################################################################################################################################
#                                                          VIEW   PAY_SAP_EPIS_CR_DTL                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."PAY_SAP_EPIS_CR_DTL" ("CONTRNO", "AR_REF", "PAY_LOCATION", "PAY_DATE", "PAY_AMOUNT", "PAY_VAT", "PAY_WT", "GL_ACCOUNT", "TRADING_PART", "BUSINESS_AREA", "BUSINESS_PLACE", "REGION", "PROCESS_DATETIME", "PRODUCT_CODE", "LOCATION_NAME", "BILL_GROUP", "CCTR", "POST_DATE", "RECEIPT_NO", "PAY_TOTALAMOUNT", "TYPE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "CUSTOMER_GROUP", "REMARK", "BILL_TYPE", "SERVICE_PRIORITY_PRODUCT", "REVERSE_ID", "CHANNEL", "REVERSE_DATE", "REGION_DW", "INV_DATE", "DUE_DATE", "PAY_TYPE", "DEFAULT_PROD", "USAGE_PERIOD", "COLLECTION_UNIT", "COLLECTION_CODE") AS 
  select 
NVL(dw.CONTRNO,' ' ) AS CONTRNO,
NVL(dw.AR_REF,' ') AS AR_REF,
NVL(dw.PAY_LOCATION,' ') AS PAY_LOCATION,
NVL(TO_CHAR(dw.pay_date_dt, 'yyyymmdd'),' ') AS  PAY_DATE,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as PAY_VAT  ,

CASE dw.paytype
WHEN 'WT'  THEN dw.pay_totalamount
ELSE 0 END   AS	   PAY_WT     ,

NVL(dw.GL_ACCOUNT,' ') AS GL_ACCOUNT,
NVL(dw.TRADING_PART,' ') AS TRADING_PART,
NVL(dw.BUSINESS_AREA,' ') AS BUSINESS_AREA,
NVL(dw.BUSINESS_PLACE,' ') AS BUSINESS_PLACE,
NVL(dw.REGION_SAP,' ') as region,
TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
NVL(dw.PRO_PRODUCT_CODE,' ') as   PRODUCT_CODE ,
NVL(SUBSTR(dw.LOCATION_NAME,0,16),' ') AS LOCATION_NAME,
NVL(dw.BILL_GROUP,' ') AS BILL_GROUP,
NVL(dw.CCTR_SAP,' ') AS CCTR,
NVL(TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd'),' ')  as post_date,
NVL(dw.RECEIPTNO,' ') AS   RECEIPT_NO            ,
dw.PAY_TOTALAMOUNT,
' ' AS TYPE,
NVL(dw.PRO_SUB_PRODUCT_CODE,' ') AS   SUB_PRODUCT_CODE ,
NVL(dw.REVENUE_TYPE_CODE,' ') AS REVENUE_TYPE_CODE,
NVL(dw.CUSTOMER_GROUP,' ') AS CUSTOMER_GROUP,
NVL(SUBSTR(DW.REMARK_RECEIPT,0,9),' ') AS REMARK,
'IBACSS' AS   BILL_TYPE,
NVL(dw.SERVICE_PRIORITY_PRODUCT,' ') AS SERVICE_PRIORITY_PRODUCT,
' ' AS REVERSE_ID,
'EPI' AS  CHANNEL ,
NVL(TO_CHAR(dw.reverse_date_dt, 'yyyymmdd'),' ') as reverse_date,
' ' AS region_dw,
NVL(TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd'),' ') as inv_date,
NVL(TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd'),' ') as due_date,
NVL(dw.PAYTYPE,' ') as pay_type,
' ' AS   DEFAULT_PROD,

CASE dw.AR_REF 
WHEN 'Advance Payment' THEN  ' '
ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
END AS  USAGE_PERIOD ,

NVL(dw.COLLECTION_UNIT,' ') AS COLLECTION_UNIT,
NVL(dw.COLLECTION_CODE,' ') AS COLLECTION_CODE


from DW_EPIS dw
where dw.SERVICE_SOURCE = 'IBACSS'
and reverse_date is null
--and reverse_date is not null
;


/*##########################################################################################################################################
#                                                          VIEW   PAY_SAP_EPIS_OTHO_CR_DTL                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."PAY_SAP_EPIS_OTHO_CR_DTL" ("CONTRNO", "AR_REF", "PAY_LOCATION", "PAY_DATE", "PAY_AMOUNT", "PAY_VAT", "PAY_WT", "GL_ACCOUNT", "TRADING_PART", "BUSINESS_AREA", "BUSINESS_PLACE", "REGION", "PROCESS_DATETIME", "PRODUCT_CODE", "LOCATION_NAME", "BILL_GROUP", "POST_DATE", "CCTR", "PAY_TOTALAMOUNT", "REF", "TYPE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "CUSTOMER_GROUP", "CAT_SERVICE", "PERIOD", "CHANNEL", "RECEIPT_NO", "SERVICE_PRIORITY_PRODUCT", "REGION_DW", "INV_DATE", "DUE_DATE", "PAY_TYPE", "DEFAULT_PROD", "USAGE_PERIOD", "COLLECTION_UNIT", "COLLECTION_CODE") AS 
  select 
NVL(dw.CONTRNO,' ') AS CONTRNO,
NVL(dw.AR_REF,' ') AS AR_REF,
NVL(dw.PAY_LOCATION,' ') AS PAY_LOCATION,
NVL(TO_CHAR(dw.pay_date_dt, 'yyyymmdd'),' ') AS  PAY_DATE,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as PAY_VAT  ,

CASE dw.paytype
WHEN 'WT'  THEN dw.pay_totalamount
ELSE 0 END   AS	   PAY_WT     ,

NVL(dw.GL_ACCOUNT,' ') AS GL_ACCOUNT,
NVL(dw.TRADING_PART,' ') AS TRADING_PART,
NVL(dw.BUSINESS_AREA,' ') AS BUSINESS_AREA,
NVL(dw.BUSINESS_PLACE,' ') AS BUSINESS_PLACE,
NVL(dw.REGION_SAP,' ') as region,
NVL(TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS'),' ') AS  PROCESS_DATETIME,
NVL(dw.PRO_PRODUCT_CODE,' ') as   PRODUCT_CODE ,
NVL(substr(dw.LOCATION_NAME,0,16),' ') as LOCATION_NAME,
NVL(dw.BILL_GROUP,' ') AS BILL_GROUP,
NVL(TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd'),' ')  as post_date,
NVL(dw.CCTR_SAP,' ') AS CCTR,
dw.PAY_TOTALAMOUNT AS PAY_TOTALAMOUNT,
' ' AS REF,
' ' AS TYPE,
NVL(dw.PRO_SUB_PRODUCT_CODE,' ') AS   SUB_PRODUCT_CODE ,
NVL(dw.REVENUE_TYPE_CODE, ' ') AS REVENUE_TYPE_CODE,
NVL(dw.CUSTOMER_GROUP,' ') AS CUSTOMER_GROUP,
NVL(dw.CAT_SERVICE,' ') AS CAT_SERVICE,
--SUBSTR(DW.INV_PERIOD,0,5) AS PERIOD
substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,6)  AS PERIOD,



'EPI' AS  CHANNEL ,
NVL(dw.RECEIPTNO,' ') AS RECEIPT_NO,
NVL(dw.SERVICE_PRIORITY_PRODUCT,' ') AS SERVICE_PRIORITY_PRODUCT,
' ' AS region_dw,
NVL(TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd'),' ') as inv_date,
NVL(TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd'),' ') as due_date,
NVL(dw.PAYTYPE,' ') as pay_type,
' ' as default_prod,

CASE dw.AR_REF 
WHEN 'Advance Payment' THEN  ' '
ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
END AS  USAGE_PERIOD ,

NVL(dw.COLLECTION_UNIT, ' ') AS COLLECTION_UNIT,
NVL(dw.COLLECTION_CODE,' ') AS COLLECTION_CODE

from DW_EPIS dw
where dw.SERVICE_SOURCE = 'OTBOSS'
and reverse_date is null;


/*##########################################################################################################################################
#                                                          VIEW   PAY_SAP_EPIS_OTHO_REV                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."PAY_SAP_EPIS_OTHO_REV" ("CONTRNO", "AR_REF", "PAY_LOCATION", "PAY_DATE", "PAY_AMOUNT", "PAY_VAT", "PAY_WT", "GL_ACCOUNT", "TRADING_PART", "BUSINESS_AREA", "BUSINESS_PLACE", "REGION", "PROCESS_DATETIME", "PRODUCT_CODE", "LOCATION_NAME", "BILL_GROUP", "POST_DATE", "CCTR", "PAY_TOTALAMOUNT", "REF", "TYPE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "CUSTOMER_GROUP", "CAT_SERVICE", "PERIOD", "CHANNEL", "RECEIPT_NO", "SERVICE_PRIORITY_PRODUCT", "REGION_DW", "INV_DATE", "DUE_DATE", "PAY_TYPE", "DEFAULT_PROD", "USAGE_PERIOD", "REVERSE_DATE", "COLLECTION_UNIT", "COLLECTION_CODE") AS 
  select 
NVL(dw.CONTRNO,' ') AS CONTRNO,
NVL(dw.AR_REF,' ') AS AR_REF,
NVL(dw.PAY_LOCATION,' ') AS PAY_LOCATION,
NVL(TO_CHAR(dw.pay_date_dt, 'yyyymmdd'),' ') AS  PAY_DATE,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as PAY_VAT  ,

CASE dw.paytype
WHEN 'WT'  THEN dw.pay_totalamount
ELSE 0 END   AS	   PAY_WT     ,

NVL(dw.GL_ACCOUNT,' ') AS GL_ACCOUNT,
NVL(dw.TRADING_PART,' ') AS TRADING_PART, 
NVL(dw.BUSINESS_AREA,' ') AS BUSINESS_AREA,
NVL(dw.BUSINESS_PLACE,' ') AS BUSINESS_PLACE,
NVL(dw.REGION_SAP,' ') as region,
TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
NVL(dw.PRO_PRODUCT_CODE,' ') as   PRODUCT_CODE ,
NVL(substr(dw.LOCATION_NAME,0,16),' ') as LOCATION_NAME,
NVL(dw.BILL_GROUP,' ') AS BILL_GROUP,
NVL(TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd'),' ')  as post_date,
NVL(dw.CCTR_SAP,' ') AS CCTR,
dw.PAY_TOTALAMOUNT AS PAY_TOTALAMOUNT,
' ' AS REF,
' ' AS TYPE,
NVL(dw.PRO_SUB_PRODUCT_CODE,' ') AS   SUB_PRODUCT_CODE ,
NVL(dw.REVENUE_TYPE_CODE,' ') AS REVENUE_TYPE_CODE,
NVL(dw.CUSTOMER_GROUP,' ') AS CUSTOMER_GROUP,
NVL(dw.CAT_SERVICE,' ') AS CAT_SERVICE,
substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,6)  AS PERIOD,
'EPI' AS  CHANNEL ,
NVL(dw.RECEIPTNO,' ') AS RECEIPT_NO,
NVL(dw.SERVICE_PRIORITY_PRODUCT,' ') AS SERVICE_PRIORITY_PRODUCT,
' ' AS region_dw,
NVL(TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd'),' ') as inv_date,
NVL(TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd'),' ') as due_date,
NVL(dw.PAYTYPE,' ') as pay_type,
' ' as default_prod,

CASE dw.AR_REF 
WHEN 'Advance Payment' THEN  ' '
ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
END AS  USAGE_PERIOD ,

NVL(TO_CHAR(dw.reverse_date_dt, 'yyyymmdd'),' ') as reverse_date,
NVL(dw.COLLECTION_UNIT,' ') AS COLLECTION_UNIT,
NVL(dw.COLLECTION_CODE,' ') AS COLLECTION_CODE

from DW_EPIS dw
where dw.SERVICE_SOURCE = 'OTBOSS'
--and reverse_date is not null
and UPDATE_DATE < reverse_date;

/*##########################################################################################################################################
#                                                          VIEW   PAY_SAP_EPIS_REVERSE                                                   #
############################################################################################################################################*/

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EPIS"."PAY_SAP_EPIS_REVERSE" ("CONTRNO", "AR_REF", "PAY_LOCATION", "PAY_DATE", "PAY_AMOUNT", "PAY_VAT", "PAY_WT", "GL_ACCOUNT", "TRADING_PART", "BUSINESS_AREA", "BUSINESS_PLACE", "REGION", "PROCESS_DATETIME", "PRODUCT_CODE", "LOCATION_NAME", "BILL_GROUP", "CCTR", "POST_DATE", "REFERENCE", "PAY_TOTALAMOUNT", "TYPE", "SUB_PRODUCT_CODE", "REVENUE_TYPE_CODE", "CUSTOMER_GROUP", "REMARK", "BILL_TYPE", "SERVICE_PRIORITY_PRODUCT", "REVERSE_ID", "CHANNEL", "REVERSE_DATE", "REGION_DW", "INV_DATE", "DUE_DATE", "PAY_TYPE", "PERIOD", "COLLECTION_UNIT", "COLLECTION_CODE") AS 
  select 
NVL(dw.CONTRNO,' ') as CONTRNO,
--NVL(dw.AR_REF, ' ') as AR_REF,
NVL(case dw.AR_REF
when 'เงินยกให้กสท' then '99999999'
when 'Advance Payment' then '0'
else dw.AR_REF
end, ' ')as AR_REF,
NVL(dw.PAY_LOCATION,' ') as PAY_LOCATION,
NVL(TO_CHAR(dw.pay_date_dt, 'yyyymmdd'),' ') AS  PAY_DATE,
dw.INV_AMT_BEFORE_VAT as  PAY_AMOUNT ,
dw.INV_VAT as PAY_VAT  ,

CASE dw.paytype
WHEN 'WT'  THEN dw.pay_totalamount
ELSE 0 END   AS	   PAY_WT     ,

NVL(dw.GL_ACCOUNT,' ') as GL_ACCOUNT,
NVL(dw.TRADING_PART,' ') as TRADING_PART,
NVL(dw.BUSINESS_AREA,' ') as BUSINESS_AREA,
NVL(dw.BUSINESS_PLACE,' ') as BUSINESS_PLACE,
NVL(dw.REGION_SAP, ' ') as region,
TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24:MI:SS') AS  PROCESS_DATETIME,
NVL(dw.PRO_PRODUCT_CODE,' ') as   PRODUCT_CODE ,
substr(dw.LOCATION_NAME,0,16) as LOCATION_NAME,
NVL(dw.BILL_GROUP, ' ') as BILL_GROUP,
NVL(dw.CCTR_SAP, ' ') AS CCTR,
NVL(TO_CHAR(dw.POST_DATE_DT, 'yyyymmdd'), ' ')  as post_date,
NVL(dw.RECEIPTNO,' ') AS REFERENCE,
NVL(dw.PAY_TOTALAMOUNT, 0) as PAY_TOTALAMOUNT,
--'' AS REF,
' ' AS TYPE,
NVL(dw.PRO_SUB_PRODUCT_CODE, ' ') AS   SUB_PRODUCT_CODE ,
NVL(dw.REVENUE_TYPE_CODE,' ') as REVENUE_TYPE_CODE,
NVL(dw.CUSTOMER_GROUP,' ') as CUSTOMER_GROUP,
NVL(DW.REMARK_RECEIPT,' ') AS REMARK,
'IBACSS' AS   BILL_TYPE,
NVL(dw.SERVICE_PRIORITY_PRODUCT, ' ') as SERVICE_PRIORITY_PRODUCT,
' ' AS REVERSE_ID,
'EPI' AS  CHANNEL ,
NVL(TO_CHAR(dw.reverse_date_dt, 'yyyymmdd'),' ') as reverse_date,
' ' AS region_dw,
NVL(TO_CHAR(dw.INV_DATE_DT, 'yyyymmdd'),' ') as inv_date,
NVL(TO_CHAR(dw.DUE_DATE_DT, 'yyyymmdd'),' ') as due_date,
NVL(dw.PAYTYPE, ' ') as pay_type,

--INV_PERIOD,
NVL(substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,16), ' ')  AS PERIOD,
--substr(substr(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),0,6),0,10)  AS PERIOD,
--'2016012220160131' AS PERIOD,


NVL(dw.COLLECTION_UNIT,' ') as COLLECTION_UNIT,
NVL(dw.COLLECTION_CODE,' ') as COLLECTION_CODE





--CASE dw.AR_REF 
--WHEN 'Advance Payment' THEN  ' '
--ELSE NVL(substr(dw.INV_PERIOD,7,4) || substr(dw.INV_PERIOD,4,2) || substr(dw.INV_PERIOD,0,2) || substr(dw.INV_PERIOD,-4,4) || substr(dw.INV_PERIOD,-7,2) || substr(dw.INV_PERIOD,-10,2),' ')
--END AS  USAGE_PERIOD ,




from DW_EPIS dw
where dw.SERVICE_SOURCE = 'IBACSS'
--and reverse_date is not null
and UPDATE_DATE < reverse_date
and inv_period not like '%เริ่มตั้งแต่เดือน%';

--change name colume amount
ALTER TABLE "INV_SOURCE" RENAME COLUMN "AMOUNT_BAHT_AR" TO "AMOUNT_OTHER_AR";

/*##########################################################################################################################################
#                                                          			VIEW                                                  					#
############################################################################################################################################*/
